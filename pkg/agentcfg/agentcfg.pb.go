// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v3.21.7
// source: pkg/agentcfg/agentcfg.proto

package agentcfg

import (
	reflect "reflect"
	sync "sync"

	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	structpb "google.golang.org/protobuf/types/known/structpb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogLevelEnum int32

const (
	LogLevelEnum_info  LogLevelEnum = 0
	LogLevelEnum_debug LogLevelEnum = 1
	LogLevelEnum_warn  LogLevelEnum = 2
	LogLevelEnum_error LogLevelEnum = 3
)

// Enum value maps for LogLevelEnum.
var (
	LogLevelEnum_name = map[int32]string{
		0: "info",
		1: "debug",
		2: "warn",
		3: "error",
	}
	LogLevelEnum_value = map[string]int32{
		"info":  0,
		"debug": 1,
		"warn":  2,
		"error": 3,
	}
)

func (x LogLevelEnum) Enum() *LogLevelEnum {
	p := new(LogLevelEnum)
	*p = x
	return p
}

func (x LogLevelEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LogLevelEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_agentcfg_agentcfg_proto_enumTypes[0].Descriptor()
}

func (LogLevelEnum) Type() protoreflect.EnumType {
	return &file_pkg_agentcfg_agentcfg_proto_enumTypes[0]
}

func (x LogLevelEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LogLevelEnum.Descriptor instead.
func (LogLevelEnum) EnumDescriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{0}
}

type PathCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Glob string `protobuf:"bytes,1,opt,name=glob,proto3" json:"glob,omitempty"`
}

func (x *PathCF) Reset() {
	*x = PathCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PathCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PathCF) ProtoMessage() {}

func (x *PathCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PathCF.ProtoReflect.Descriptor instead.
func (*PathCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{0}
}

func (x *PathCF) GetGlob() string {
	if x != nil {
		return x.Glob
	}
	return ""
}

type ManifestProjectCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               *string              `protobuf:"bytes,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	DefaultNamespace string               `protobuf:"bytes,4,opt,name=default_namespace,proto3" json:"default_namespace,omitempty"`
	Paths            []*PathCF            `protobuf:"bytes,5,rep,name=paths,proto3" json:"paths,omitempty"`
	ReconcileTimeout *durationpb.Duration `protobuf:"bytes,6,opt,name=reconcile_timeout,proto3" json:"reconcile_timeout,omitempty"`
	DryRunStrategy   string               `protobuf:"bytes,7,opt,name=dry_run_strategy,proto3" json:"dry_run_strategy,omitempty"`
	// Types that are assignable to PruneOneof:
	//
	//	*ManifestProjectCF_Prune
	PruneOneof             isManifestProjectCF_PruneOneof `protobuf_oneof:"prune_oneof"`
	PruneTimeout           *durationpb.Duration           `protobuf:"bytes,9,opt,name=prune_timeout,proto3" json:"prune_timeout,omitempty"`
	PrunePropagationPolicy string                         `protobuf:"bytes,10,opt,name=prune_propagation_policy,proto3" json:"prune_propagation_policy,omitempty"`
	InventoryPolicy        string                         `protobuf:"bytes,11,opt,name=inventory_policy,proto3" json:"inventory_policy,omitempty"`
	Ref                    *GitRefCF                      `protobuf:"bytes,12,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *ManifestProjectCF) Reset() {
	*x = ManifestProjectCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManifestProjectCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManifestProjectCF) ProtoMessage() {}

func (x *ManifestProjectCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManifestProjectCF.ProtoReflect.Descriptor instead.
func (*ManifestProjectCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{1}
}

func (x *ManifestProjectCF) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *ManifestProjectCF) GetDefaultNamespace() string {
	if x != nil {
		return x.DefaultNamespace
	}
	return ""
}

func (x *ManifestProjectCF) GetPaths() []*PathCF {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *ManifestProjectCF) GetReconcileTimeout() *durationpb.Duration {
	if x != nil {
		return x.ReconcileTimeout
	}
	return nil
}

func (x *ManifestProjectCF) GetDryRunStrategy() string {
	if x != nil {
		return x.DryRunStrategy
	}
	return ""
}

func (m *ManifestProjectCF) GetPruneOneof() isManifestProjectCF_PruneOneof {
	if m != nil {
		return m.PruneOneof
	}
	return nil
}

func (x *ManifestProjectCF) GetPrune() bool {
	if x, ok := x.GetPruneOneof().(*ManifestProjectCF_Prune); ok {
		return x.Prune
	}
	return false
}

func (x *ManifestProjectCF) GetPruneTimeout() *durationpb.Duration {
	if x != nil {
		return x.PruneTimeout
	}
	return nil
}

func (x *ManifestProjectCF) GetPrunePropagationPolicy() string {
	if x != nil {
		return x.PrunePropagationPolicy
	}
	return ""
}

func (x *ManifestProjectCF) GetInventoryPolicy() string {
	if x != nil {
		return x.InventoryPolicy
	}
	return ""
}

func (x *ManifestProjectCF) GetRef() *GitRefCF {
	if x != nil {
		return x.Ref
	}
	return nil
}

type isManifestProjectCF_PruneOneof interface {
	isManifestProjectCF_PruneOneof()
}

type ManifestProjectCF_Prune struct {
	Prune bool `protobuf:"varint,8,opt,name=prune,proto3,oneof"`
}

func (*ManifestProjectCF_Prune) isManifestProjectCF_PruneOneof() {}

type GitRefCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Ref:
	//
	//	*GitRefCF_Tag
	//	*GitRefCF_Branch
	//	*GitRefCF_Commit
	Ref isGitRefCF_Ref `protobuf_oneof:"ref"`
}

func (x *GitRefCF) Reset() {
	*x = GitRefCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitRefCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitRefCF) ProtoMessage() {}

func (x *GitRefCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitRefCF.ProtoReflect.Descriptor instead.
func (*GitRefCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{2}
}

func (m *GitRefCF) GetRef() isGitRefCF_Ref {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (x *GitRefCF) GetTag() string {
	if x, ok := x.GetRef().(*GitRefCF_Tag); ok {
		return x.Tag
	}
	return ""
}

func (x *GitRefCF) GetBranch() string {
	if x, ok := x.GetRef().(*GitRefCF_Branch); ok {
		return x.Branch
	}
	return ""
}

func (x *GitRefCF) GetCommit() string {
	if x, ok := x.GetRef().(*GitRefCF_Commit); ok {
		return x.Commit
	}
	return ""
}

type isGitRefCF_Ref interface {
	isGitRefCF_Ref()
}

type GitRefCF_Tag struct {
	Tag string `protobuf:"bytes,1,opt,name=tag,proto3,oneof"`
}

type GitRefCF_Branch struct {
	Branch string `protobuf:"bytes,2,opt,name=branch,proto3,oneof"`
}

type GitRefCF_Commit struct {
	Commit string `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

func (*GitRefCF_Tag) isGitRefCF_Ref() {}

func (*GitRefCF_Branch) isGitRefCF_Ref() {}

func (*GitRefCF_Commit) isGitRefCF_Ref() {}

type ChartProjectSourceCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string    `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Path string    `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Ref  *GitRefCF `protobuf:"bytes,3,opt,name=ref,proto3" json:"ref,omitempty"`
}

func (x *ChartProjectSourceCF) Reset() {
	*x = ChartProjectSourceCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartProjectSourceCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartProjectSourceCF) ProtoMessage() {}

func (x *ChartProjectSourceCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartProjectSourceCF.ProtoReflect.Descriptor instead.
func (*ChartProjectSourceCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{3}
}

func (x *ChartProjectSourceCF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ChartProjectSourceCF) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ChartProjectSourceCF) GetRef() *GitRefCF {
	if x != nil {
		return x.Ref
	}
	return nil
}

type ChartSourceCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Source:
	//
	//	*ChartSourceCF_Project
	Source isChartSourceCF_Source `protobuf_oneof:"source"`
}

func (x *ChartSourceCF) Reset() {
	*x = ChartSourceCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartSourceCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartSourceCF) ProtoMessage() {}

func (x *ChartSourceCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartSourceCF.ProtoReflect.Descriptor instead.
func (*ChartSourceCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{4}
}

func (m *ChartSourceCF) GetSource() isChartSourceCF_Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (x *ChartSourceCF) GetProject() *ChartProjectSourceCF {
	if x, ok := x.GetSource().(*ChartSourceCF_Project); ok {
		return x.Project
	}
	return nil
}

type isChartSourceCF_Source interface {
	isChartSourceCF_Source()
}

type ChartSourceCF_Project struct {
	Project *ChartProjectSourceCF `protobuf:"bytes,1,opt,name=project,proto3,oneof"`
}

func (*ChartSourceCF_Project) isChartSourceCF_Source() {}

type ChartCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseName string           `protobuf:"bytes,1,opt,name=release_name,proto3" json:"release_name,omitempty"`
	Source      *ChartSourceCF   `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
	Values      []*ChartValuesCF `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
	Namespace   *string          `protobuf:"bytes,4,opt,name=namespace,proto3,oneof" json:"namespace,omitempty"`
	MaxHistory  *int32           `protobuf:"varint,5,opt,name=max_history,proto3,oneof" json:"max_history,omitempty"`
}

func (x *ChartCF) Reset() {
	*x = ChartCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartCF) ProtoMessage() {}

func (x *ChartCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartCF.ProtoReflect.Descriptor instead.
func (*ChartCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{5}
}

func (x *ChartCF) GetReleaseName() string {
	if x != nil {
		return x.ReleaseName
	}
	return ""
}

func (x *ChartCF) GetSource() *ChartSourceCF {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ChartCF) GetValues() []*ChartValuesCF {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *ChartCF) GetNamespace() string {
	if x != nil && x.Namespace != nil {
		return *x.Namespace
	}
	return ""
}

func (x *ChartCF) GetMaxHistory() int32 {
	if x != nil && x.MaxHistory != nil {
		return *x.MaxHistory
	}
	return 0
}

type ChartValuesFileCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProjectId *string   `protobuf:"bytes,1,opt,name=project_id,proto3,oneof" json:"project_id,omitempty"`
	Ref       *GitRefCF `protobuf:"bytes,2,opt,name=ref,proto3" json:"ref,omitempty"`
	File      string    `protobuf:"bytes,3,opt,name=file,proto3" json:"file,omitempty"`
}

func (x *ChartValuesFileCF) Reset() {
	*x = ChartValuesFileCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartValuesFileCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartValuesFileCF) ProtoMessage() {}

func (x *ChartValuesFileCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartValuesFileCF.ProtoReflect.Descriptor instead.
func (*ChartValuesFileCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{6}
}

func (x *ChartValuesFileCF) GetProjectId() string {
	if x != nil && x.ProjectId != nil {
		return *x.ProjectId
	}
	return ""
}

func (x *ChartValuesFileCF) GetRef() *GitRefCF {
	if x != nil {
		return x.Ref
	}
	return nil
}

func (x *ChartValuesFileCF) GetFile() string {
	if x != nil {
		return x.File
	}
	return ""
}

type ChartValuesUrlCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url         string               `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	PollPeriod  *durationpb.Duration `protobuf:"bytes,2,opt,name=poll_period,proto3" json:"poll_period,omitempty"`
	MaxFileSize *uint32              `protobuf:"varint,3,opt,name=max_file_size,proto3,oneof" json:"max_file_size,omitempty"`
}

func (x *ChartValuesUrlCF) Reset() {
	*x = ChartValuesUrlCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartValuesUrlCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartValuesUrlCF) ProtoMessage() {}

func (x *ChartValuesUrlCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartValuesUrlCF.ProtoReflect.Descriptor instead.
func (*ChartValuesUrlCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{7}
}

func (x *ChartValuesUrlCF) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ChartValuesUrlCF) GetPollPeriod() *durationpb.Duration {
	if x != nil {
		return x.PollPeriod
	}
	return nil
}

func (x *ChartValuesUrlCF) GetMaxFileSize() uint32 {
	if x != nil && x.MaxFileSize != nil {
		return *x.MaxFileSize
	}
	return 0
}

type ChartValuesCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to From:
	//
	//	*ChartValuesCF_Inline
	//	*ChartValuesCF_File
	//	*ChartValuesCF_Url
	From isChartValuesCF_From `protobuf_oneof:"from"`
}

func (x *ChartValuesCF) Reset() {
	*x = ChartValuesCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChartValuesCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChartValuesCF) ProtoMessage() {}

func (x *ChartValuesCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChartValuesCF.ProtoReflect.Descriptor instead.
func (*ChartValuesCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{8}
}

func (m *ChartValuesCF) GetFrom() isChartValuesCF_From {
	if m != nil {
		return m.From
	}
	return nil
}

func (x *ChartValuesCF) GetInline() *structpb.Struct {
	if x, ok := x.GetFrom().(*ChartValuesCF_Inline); ok {
		return x.Inline
	}
	return nil
}

func (x *ChartValuesCF) GetFile() *ChartValuesFileCF {
	if x, ok := x.GetFrom().(*ChartValuesCF_File); ok {
		return x.File
	}
	return nil
}

func (x *ChartValuesCF) GetUrl() *ChartValuesUrlCF {
	if x, ok := x.GetFrom().(*ChartValuesCF_Url); ok {
		return x.Url
	}
	return nil
}

type isChartValuesCF_From interface {
	isChartValuesCF_From()
}

type ChartValuesCF_Inline struct {
	Inline *structpb.Struct `protobuf:"bytes,1,opt,name=inline,proto3,oneof"`
}

type ChartValuesCF_File struct {
	File *ChartValuesFileCF `protobuf:"bytes,2,opt,name=file,proto3,oneof"`
}

type ChartValuesCF_Url struct {
	Url *ChartValuesUrlCF `protobuf:"bytes,3,opt,name=url,proto3,oneof"`
}

func (*ChartValuesCF_Inline) isChartValuesCF_From() {}

func (*ChartValuesCF_File) isChartValuesCF_From() {}

func (*ChartValuesCF_Url) isChartValuesCF_From() {}

type GitopsCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ManifestProjects []*ManifestProjectCF `protobuf:"bytes,1,rep,name=manifest_projects,proto3" json:"manifest_projects,omitempty"`
	Charts           []*ChartCF           `protobuf:"bytes,2,rep,name=charts,proto3" json:"charts,omitempty"`
}

func (x *GitopsCF) Reset() {
	*x = GitopsCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GitopsCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GitopsCF) ProtoMessage() {}

func (x *GitopsCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GitopsCF.ProtoReflect.Descriptor instead.
func (*GitopsCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{9}
}

func (x *GitopsCF) GetManifestProjects() []*ManifestProjectCF {
	if x != nil {
		return x.ManifestProjects
	}
	return nil
}

func (x *GitopsCF) GetCharts() []*ChartCF {
	if x != nil {
		return x.Charts
	}
	return nil
}

type ObservabilityCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Logging *LoggingCF `protobuf:"bytes,1,opt,name=logging,proto3" json:"logging,omitempty"`
}

func (x *ObservabilityCF) Reset() {
	*x = ObservabilityCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObservabilityCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObservabilityCF) ProtoMessage() {}

func (x *ObservabilityCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObservabilityCF.ProtoReflect.Descriptor instead.
func (*ObservabilityCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{10}
}

func (x *ObservabilityCF) GetLogging() *LoggingCF {
	if x != nil {
		return x.Logging
	}
	return nil
}

type LoggingCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level     LogLevelEnum  `protobuf:"varint,1,opt,name=level,proto3,enum=gitlab.agent.agentcfg.LogLevelEnum" json:"level,omitempty"`
	GrpcLevel *LogLevelEnum `protobuf:"varint,2,opt,name=grpc_level,proto3,enum=gitlab.agent.agentcfg.LogLevelEnum,oneof" json:"grpc_level,omitempty"`
}

func (x *LoggingCF) Reset() {
	*x = LoggingCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoggingCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoggingCF) ProtoMessage() {}

func (x *LoggingCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoggingCF.ProtoReflect.Descriptor instead.
func (*LoggingCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{11}
}

func (x *LoggingCF) GetLevel() LogLevelEnum {
	if x != nil {
		return x.Level
	}
	return LogLevelEnum_info
}

func (x *LoggingCF) GetGrpcLevel() LogLevelEnum {
	if x != nil && x.GrpcLevel != nil {
		return *x.GrpcLevel
	}
	return LogLevelEnum_info
}

type CiAccessCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projects []*CiAccessProjectCF `protobuf:"bytes,1,rep,name=projects,proto3" json:"projects,omitempty"`
	Groups   []*CiAccessGroupCF   `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *CiAccessCF) Reset() {
	*x = CiAccessCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessCF) ProtoMessage() {}

func (x *CiAccessCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessCF.ProtoReflect.Descriptor instead.
func (*CiAccessCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{12}
}

func (x *CiAccessCF) GetProjects() []*CiAccessProjectCF {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *CiAccessCF) GetGroups() []*CiAccessGroupCF {
	if x != nil {
		return x.Groups
	}
	return nil
}

type CiAccessProjectCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DefaultNamespace string        `protobuf:"bytes,2,opt,name=default_namespace,proto3" json:"default_namespace,omitempty"`
	AccessAs         *CiAccessAsCF `protobuf:"bytes,3,opt,name=access_as,proto3" json:"access_as,omitempty"`
	Environments     []string      `protobuf:"bytes,4,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *CiAccessProjectCF) Reset() {
	*x = CiAccessProjectCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessProjectCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessProjectCF) ProtoMessage() {}

func (x *CiAccessProjectCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessProjectCF.ProtoReflect.Descriptor instead.
func (*CiAccessProjectCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{13}
}

func (x *CiAccessProjectCF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CiAccessProjectCF) GetDefaultNamespace() string {
	if x != nil {
		return x.DefaultNamespace
	}
	return ""
}

func (x *CiAccessProjectCF) GetAccessAs() *CiAccessAsCF {
	if x != nil {
		return x.AccessAs
	}
	return nil
}

func (x *CiAccessProjectCF) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

type CiAccessGroupCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               string        `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DefaultNamespace string        `protobuf:"bytes,2,opt,name=default_namespace,proto3" json:"default_namespace,omitempty"`
	AccessAs         *CiAccessAsCF `protobuf:"bytes,3,opt,name=access_as,proto3" json:"access_as,omitempty"`
	Environments     []string      `protobuf:"bytes,4,rep,name=environments,proto3" json:"environments,omitempty"`
}

func (x *CiAccessGroupCF) Reset() {
	*x = CiAccessGroupCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessGroupCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessGroupCF) ProtoMessage() {}

func (x *CiAccessGroupCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessGroupCF.ProtoReflect.Descriptor instead.
func (*CiAccessGroupCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{14}
}

func (x *CiAccessGroupCF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CiAccessGroupCF) GetDefaultNamespace() string {
	if x != nil {
		return x.DefaultNamespace
	}
	return ""
}

func (x *CiAccessGroupCF) GetAccessAs() *CiAccessAsCF {
	if x != nil {
		return x.AccessAs
	}
	return nil
}

func (x *CiAccessGroupCF) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

type CiAccessAsCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to As:
	//
	//	*CiAccessAsCF_Agent
	//	*CiAccessAsCF_Impersonate
	//	*CiAccessAsCF_CiJob
	As isCiAccessAsCF_As `protobuf_oneof:"as"`
}

func (x *CiAccessAsCF) Reset() {
	*x = CiAccessAsCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessAsCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessAsCF) ProtoMessage() {}

func (x *CiAccessAsCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessAsCF.ProtoReflect.Descriptor instead.
func (*CiAccessAsCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{15}
}

func (m *CiAccessAsCF) GetAs() isCiAccessAsCF_As {
	if m != nil {
		return m.As
	}
	return nil
}

func (x *CiAccessAsCF) GetAgent() *CiAccessAsAgentCF {
	if x, ok := x.GetAs().(*CiAccessAsCF_Agent); ok {
		return x.Agent
	}
	return nil
}

func (x *CiAccessAsCF) GetImpersonate() *CiAccessAsImpersonateCF {
	if x, ok := x.GetAs().(*CiAccessAsCF_Impersonate); ok {
		return x.Impersonate
	}
	return nil
}

func (x *CiAccessAsCF) GetCiJob() *CiAccessAsCiJobCF {
	if x, ok := x.GetAs().(*CiAccessAsCF_CiJob); ok {
		return x.CiJob
	}
	return nil
}

type isCiAccessAsCF_As interface {
	isCiAccessAsCF_As()
}

type CiAccessAsCF_Agent struct {
	Agent *CiAccessAsAgentCF `protobuf:"bytes,1,opt,name=agent,proto3,oneof"`
}

type CiAccessAsCF_Impersonate struct {
	Impersonate *CiAccessAsImpersonateCF `protobuf:"bytes,2,opt,name=impersonate,proto3,oneof"`
}

type CiAccessAsCF_CiJob struct {
	CiJob *CiAccessAsCiJobCF `protobuf:"bytes,3,opt,name=ci_job,proto3,oneof"`
}

func (*CiAccessAsCF_Agent) isCiAccessAsCF_As() {}

func (*CiAccessAsCF_Impersonate) isCiAccessAsCF_As() {}

func (*CiAccessAsCF_CiJob) isCiAccessAsCF_As() {}

type CiAccessAsAgentCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CiAccessAsAgentCF) Reset() {
	*x = CiAccessAsAgentCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessAsAgentCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessAsAgentCF) ProtoMessage() {}

func (x *CiAccessAsAgentCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessAsAgentCF.ProtoReflect.Descriptor instead.
func (*CiAccessAsAgentCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{16}
}

type CiAccessAsCiJobCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CiAccessAsCiJobCF) Reset() {
	*x = CiAccessAsCiJobCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessAsCiJobCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessAsCiJobCF) ProtoMessage() {}

func (x *CiAccessAsCiJobCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessAsCiJobCF.ProtoReflect.Descriptor instead.
func (*CiAccessAsCiJobCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{17}
}

type CiAccessAsImpersonateCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username string           `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Groups   []string         `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Uid      string           `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty"`
	Extra    []*ExtraKeyValCF `protobuf:"bytes,4,rep,name=extra,proto3" json:"extra,omitempty"`
}

func (x *CiAccessAsImpersonateCF) Reset() {
	*x = CiAccessAsImpersonateCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CiAccessAsImpersonateCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CiAccessAsImpersonateCF) ProtoMessage() {}

func (x *CiAccessAsImpersonateCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CiAccessAsImpersonateCF.ProtoReflect.Descriptor instead.
func (*CiAccessAsImpersonateCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{18}
}

func (x *CiAccessAsImpersonateCF) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *CiAccessAsImpersonateCF) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *CiAccessAsImpersonateCF) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

func (x *CiAccessAsImpersonateCF) GetExtra() []*ExtraKeyValCF {
	if x != nil {
		return x.Extra
	}
	return nil
}

type ExtraKeyValCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Val []string `protobuf:"bytes,2,rep,name=val,proto3" json:"val,omitempty"`
}

func (x *ExtraKeyValCF) Reset() {
	*x = ExtraKeyValCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExtraKeyValCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExtraKeyValCF) ProtoMessage() {}

func (x *ExtraKeyValCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExtraKeyValCF.ProtoReflect.Descriptor instead.
func (*ExtraKeyValCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{19}
}

func (x *ExtraKeyValCF) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ExtraKeyValCF) GetVal() []string {
	if x != nil {
		return x.Val
	}
	return nil
}

type UserAccessCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccessAs *UserAccessAsCF        `protobuf:"bytes,1,opt,name=access_as,proto3" json:"access_as,omitempty"`
	Projects []*UserAccessProjectCF `protobuf:"bytes,2,rep,name=projects,proto3" json:"projects,omitempty"`
	Groups   []*UserAccessGroupCF   `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *UserAccessCF) Reset() {
	*x = UserAccessCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessCF) ProtoMessage() {}

func (x *UserAccessCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessCF.ProtoReflect.Descriptor instead.
func (*UserAccessCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{20}
}

func (x *UserAccessCF) GetAccessAs() *UserAccessAsCF {
	if x != nil {
		return x.AccessAs
	}
	return nil
}

func (x *UserAccessCF) GetProjects() []*UserAccessProjectCF {
	if x != nil {
		return x.Projects
	}
	return nil
}

func (x *UserAccessCF) GetGroups() []*UserAccessGroupCF {
	if x != nil {
		return x.Groups
	}
	return nil
}

type UserAccessProjectCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserAccessProjectCF) Reset() {
	*x = UserAccessProjectCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessProjectCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessProjectCF) ProtoMessage() {}

func (x *UserAccessProjectCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessProjectCF.ProtoReflect.Descriptor instead.
func (*UserAccessProjectCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{21}
}

func (x *UserAccessProjectCF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserAccessGroupCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *UserAccessGroupCF) Reset() {
	*x = UserAccessGroupCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessGroupCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessGroupCF) ProtoMessage() {}

func (x *UserAccessGroupCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessGroupCF.ProtoReflect.Descriptor instead.
func (*UserAccessGroupCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{22}
}

func (x *UserAccessGroupCF) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type UserAccessAsCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to As:
	//
	//	*UserAccessAsCF_Agent
	//	*UserAccessAsCF_User
	As isUserAccessAsCF_As `protobuf_oneof:"as"`
}

func (x *UserAccessAsCF) Reset() {
	*x = UserAccessAsCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessAsCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessAsCF) ProtoMessage() {}

func (x *UserAccessAsCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessAsCF.ProtoReflect.Descriptor instead.
func (*UserAccessAsCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{23}
}

func (m *UserAccessAsCF) GetAs() isUserAccessAsCF_As {
	if m != nil {
		return m.As
	}
	return nil
}

func (x *UserAccessAsCF) GetAgent() *UserAccessAsAgentCF {
	if x, ok := x.GetAs().(*UserAccessAsCF_Agent); ok {
		return x.Agent
	}
	return nil
}

func (x *UserAccessAsCF) GetUser() *UserAccessAsUserCF {
	if x, ok := x.GetAs().(*UserAccessAsCF_User); ok {
		return x.User
	}
	return nil
}

type isUserAccessAsCF_As interface {
	isUserAccessAsCF_As()
}

type UserAccessAsCF_Agent struct {
	Agent *UserAccessAsAgentCF `protobuf:"bytes,1,opt,name=agent,proto3,oneof"`
}

type UserAccessAsCF_User struct {
	User *UserAccessAsUserCF `protobuf:"bytes,3,opt,name=user,proto3,oneof"`
}

func (*UserAccessAsCF_Agent) isUserAccessAsCF_As() {}

func (*UserAccessAsCF_User) isUserAccessAsCF_As() {}

type UserAccessAsAgentCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserAccessAsAgentCF) Reset() {
	*x = UserAccessAsAgentCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessAsAgentCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessAsAgentCF) ProtoMessage() {}

func (x *UserAccessAsAgentCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessAsAgentCF.ProtoReflect.Descriptor instead.
func (*UserAccessAsAgentCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{24}
}

type UserAccessAsUserCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UserAccessAsUserCF) Reset() {
	*x = UserAccessAsUserCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserAccessAsUserCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserAccessAsUserCF) ProtoMessage() {}

func (x *UserAccessAsUserCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserAccessAsUserCF.ProtoReflect.Descriptor instead.
func (*UserAccessAsUserCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{25}
}

type ContainerScanningCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VulnerabilityReport  *VulnerabilityReport  `protobuf:"bytes,1,opt,name=vulnerability_report,proto3" json:"vulnerability_report,omitempty"`
	Cadence              string                `protobuf:"bytes,2,opt,name=cadence,proto3" json:"cadence,omitempty"`
	ResourceRequirements *ResourceRequirements `protobuf:"bytes,3,opt,name=resource_requirements,proto3" json:"resource_requirements,omitempty"`
}

func (x *ContainerScanningCF) Reset() {
	*x = ContainerScanningCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerScanningCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerScanningCF) ProtoMessage() {}

func (x *ContainerScanningCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerScanningCF.ProtoReflect.Descriptor instead.
func (*ContainerScanningCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{26}
}

func (x *ContainerScanningCF) GetVulnerabilityReport() *VulnerabilityReport {
	if x != nil {
		return x.VulnerabilityReport
	}
	return nil
}

func (x *ContainerScanningCF) GetCadence() string {
	if x != nil {
		return x.Cadence
	}
	return ""
}

func (x *ContainerScanningCF) GetResourceRequirements() *ResourceRequirements {
	if x != nil {
		return x.ResourceRequirements
	}
	return nil
}

type VulnerabilityReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []string                   `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Filters    []*ContainerScanningFilter `protobuf:"bytes,2,rep,name=filters,proto3" json:"filters,omitempty"`
}

func (x *VulnerabilityReport) Reset() {
	*x = VulnerabilityReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VulnerabilityReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VulnerabilityReport) ProtoMessage() {}

func (x *VulnerabilityReport) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VulnerabilityReport.ProtoReflect.Descriptor instead.
func (*VulnerabilityReport) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{27}
}

func (x *VulnerabilityReport) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *VulnerabilityReport) GetFilters() []*ContainerScanningFilter {
	if x != nil {
		return x.Filters
	}
	return nil
}

type ContainerScanningFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []string `protobuf:"bytes,1,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	Resources  []string `protobuf:"bytes,2,rep,name=resources,proto3" json:"resources,omitempty"`
	Containers []string `protobuf:"bytes,3,rep,name=containers,proto3" json:"containers,omitempty"`
	Kinds      []string `protobuf:"bytes,4,rep,name=kinds,proto3" json:"kinds,omitempty"`
}

func (x *ContainerScanningFilter) Reset() {
	*x = ContainerScanningFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContainerScanningFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerScanningFilter) ProtoMessage() {}

func (x *ContainerScanningFilter) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerScanningFilter.ProtoReflect.Descriptor instead.
func (*ContainerScanningFilter) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{28}
}

func (x *ContainerScanningFilter) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *ContainerScanningFilter) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ContainerScanningFilter) GetContainers() []string {
	if x != nil {
		return x.Containers
	}
	return nil
}

func (x *ContainerScanningFilter) GetKinds() []string {
	if x != nil {
		return x.Kinds
	}
	return nil
}

type ResourceRequirements struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limits   *Resource `protobuf:"bytes,1,opt,name=limits,proto3" json:"limits,omitempty"`
	Requests *Resource `protobuf:"bytes,2,opt,name=requests,proto3" json:"requests,omitempty"`
}

func (x *ResourceRequirements) Reset() {
	*x = ResourceRequirements{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceRequirements) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceRequirements) ProtoMessage() {}

func (x *ResourceRequirements) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceRequirements.ProtoReflect.Descriptor instead.
func (*ResourceRequirements) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{29}
}

func (x *ResourceRequirements) GetLimits() *Resource {
	if x != nil {
		return x.Limits
	}
	return nil
}

func (x *ResourceRequirements) GetRequests() *Resource {
	if x != nil {
		return x.Requests
	}
	return nil
}

type Resource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cpu    string `protobuf:"bytes,1,opt,name=cpu,proto3" json:"cpu,omitempty"`
	Memory string `protobuf:"bytes,2,opt,name=memory,proto3" json:"memory,omitempty"`
}

func (x *Resource) Reset() {
	*x = Resource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Resource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Resource) ProtoMessage() {}

func (x *Resource) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Resource.ProtoReflect.Descriptor instead.
func (*Resource) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{30}
}

func (x *Resource) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *Resource) GetMemory() string {
	if x != nil {
		return x.Memory
	}
	return ""
}

type ConfigurationFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitops            *GitopsCF            `protobuf:"bytes,1,opt,name=gitops,proto3" json:"gitops,omitempty"`
	Observability     *ObservabilityCF     `protobuf:"bytes,2,opt,name=observability,proto3" json:"observability,omitempty"`
	CiAccess          *CiAccessCF          `protobuf:"bytes,4,opt,name=ci_access,proto3" json:"ci_access,omitempty"`
	ContainerScanning *ContainerScanningCF `protobuf:"bytes,5,opt,name=container_scanning,proto3" json:"container_scanning,omitempty"`
	UserAccess        *UserAccessCF        `protobuf:"bytes,6,opt,name=user_access,proto3" json:"user_access,omitempty"`
	RemoteDevelopment *RemoteCF            `protobuf:"bytes,7,opt,name=remote_development,proto3" json:"remote_development,omitempty"`
	Flux              *FluxCF              `protobuf:"bytes,8,opt,name=flux,proto3" json:"flux,omitempty"`
}

func (x *ConfigurationFile) Reset() {
	*x = ConfigurationFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationFile) ProtoMessage() {}

func (x *ConfigurationFile) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationFile.ProtoReflect.Descriptor instead.
func (*ConfigurationFile) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{31}
}

func (x *ConfigurationFile) GetGitops() *GitopsCF {
	if x != nil {
		return x.Gitops
	}
	return nil
}

func (x *ConfigurationFile) GetObservability() *ObservabilityCF {
	if x != nil {
		return x.Observability
	}
	return nil
}

func (x *ConfigurationFile) GetCiAccess() *CiAccessCF {
	if x != nil {
		return x.CiAccess
	}
	return nil
}

func (x *ConfigurationFile) GetContainerScanning() *ContainerScanningCF {
	if x != nil {
		return x.ContainerScanning
	}
	return nil
}

func (x *ConfigurationFile) GetUserAccess() *UserAccessCF {
	if x != nil {
		return x.UserAccess
	}
	return nil
}

func (x *ConfigurationFile) GetRemoteDevelopment() *RemoteCF {
	if x != nil {
		return x.RemoteDevelopment
	}
	return nil
}

func (x *ConfigurationFile) GetFlux() *FluxCF {
	if x != nil {
		return x.Flux
	}
	return nil
}

type AgentConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Gitops            *GitopsCF            `protobuf:"bytes,1,opt,name=gitops,proto3" json:"gitops,omitempty"`
	Observability     *ObservabilityCF     `protobuf:"bytes,2,opt,name=observability,proto3" json:"observability,omitempty"`
	AgentId           int64                `protobuf:"varint,4,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	ProjectId         int64                `protobuf:"varint,5,opt,name=project_id,json=projectId,proto3" json:"project_id,omitempty"`
	CiAccess          *CiAccessCF          `protobuf:"bytes,6,opt,name=ci_access,json=ciAccess,proto3" json:"ci_access,omitempty"`
	ContainerScanning *ContainerScanningCF `protobuf:"bytes,7,opt,name=container_scanning,json=containerScanning,proto3" json:"container_scanning,omitempty"`
	ProjectPath       string               `protobuf:"bytes,8,opt,name=project_path,json=projectPath,proto3" json:"project_path,omitempty"`
	RemoteDevelopment *RemoteCF            `protobuf:"bytes,9,opt,name=remote_development,json=remoteDevelopment,proto3" json:"remote_development,omitempty"`
	Flux              *FluxCF              `protobuf:"bytes,10,opt,name=flux,proto3" json:"flux,omitempty"`
	GitlabExternalUrl string               `protobuf:"bytes,11,opt,name=gitlab_external_url,json=gitlabExternalUrl,proto3" json:"gitlab_external_url,omitempty"`
}

func (x *AgentConfiguration) Reset() {
	*x = AgentConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AgentConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AgentConfiguration) ProtoMessage() {}

func (x *AgentConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AgentConfiguration.ProtoReflect.Descriptor instead.
func (*AgentConfiguration) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{32}
}

func (x *AgentConfiguration) GetGitops() *GitopsCF {
	if x != nil {
		return x.Gitops
	}
	return nil
}

func (x *AgentConfiguration) GetObservability() *ObservabilityCF {
	if x != nil {
		return x.Observability
	}
	return nil
}

func (x *AgentConfiguration) GetAgentId() int64 {
	if x != nil {
		return x.AgentId
	}
	return 0
}

func (x *AgentConfiguration) GetProjectId() int64 {
	if x != nil {
		return x.ProjectId
	}
	return 0
}

func (x *AgentConfiguration) GetCiAccess() *CiAccessCF {
	if x != nil {
		return x.CiAccess
	}
	return nil
}

func (x *AgentConfiguration) GetContainerScanning() *ContainerScanningCF {
	if x != nil {
		return x.ContainerScanning
	}
	return nil
}

func (x *AgentConfiguration) GetProjectPath() string {
	if x != nil {
		return x.ProjectPath
	}
	return ""
}

func (x *AgentConfiguration) GetRemoteDevelopment() *RemoteCF {
	if x != nil {
		return x.RemoteDevelopment
	}
	return nil
}

func (x *AgentConfiguration) GetFlux() *FluxCF {
	if x != nil {
		return x.Flux
	}
	return nil
}

func (x *AgentConfiguration) GetGitlabExternalUrl() string {
	if x != nil {
		return x.GitlabExternalUrl
	}
	return ""
}

type RemoteCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled             bool                 `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	DnsZone             string               `protobuf:"bytes,2,opt,name=dns_zone,proto3" json:"dns_zone,omitempty"`
	PartialSyncInterval *durationpb.Duration `protobuf:"bytes,3,opt,name=partial_sync_interval,proto3" json:"partial_sync_interval,omitempty"`
	FullSyncInterval    *durationpb.Duration `protobuf:"bytes,4,opt,name=full_sync_interval,proto3" json:"full_sync_interval,omitempty"`
}

func (x *RemoteCF) Reset() {
	*x = RemoteCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteCF) ProtoMessage() {}

func (x *RemoteCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteCF.ProtoReflect.Descriptor instead.
func (*RemoteCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{33}
}

func (x *RemoteCF) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *RemoteCF) GetDnsZone() string {
	if x != nil {
		return x.DnsZone
	}
	return ""
}

func (x *RemoteCF) GetPartialSyncInterval() *durationpb.Duration {
	if x != nil {
		return x.PartialSyncInterval
	}
	return nil
}

func (x *RemoteCF) GetFullSyncInterval() *durationpb.Duration {
	if x != nil {
		return x.FullSyncInterval
	}
	return nil
}

type FluxCF struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WebhookReceiverUrl string `protobuf:"bytes,1,opt,name=webhook_receiver_url,proto3" json:"webhook_receiver_url,omitempty"`
}

func (x *FluxCF) Reset() {
	*x = FluxCF{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FluxCF) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FluxCF) ProtoMessage() {}

func (x *FluxCF) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_agentcfg_agentcfg_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FluxCF.ProtoReflect.Descriptor instead.
func (*FluxCF) Descriptor() ([]byte, []int) {
	return file_pkg_agentcfg_agentcfg_proto_rawDescGZIP(), []int{34}
}

func (x *FluxCF) GetWebhookReceiverUrl() string {
	if x != nil {
		return x.WebhookReceiverUrl
	}
	return ""
}

var File_pkg_agentcfg_agentcfg_proto protoreflect.FileDescriptor

var file_pkg_agentcfg_agentcfg_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67,
	0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x63, 0x66, 0x67, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x25, 0x0a, 0x06, 0x50,
	0x61, 0x74, 0x68, 0x43, 0x46, 0x12, 0x1b, 0x0a, 0x04, 0x67, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x04, 0x67, 0x6c,
	0x6f, 0x62, 0x22, 0x9e, 0x05, 0x0a, 0x11, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x46, 0x12, 0x1c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x48, 0x01, 0x52,
	0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x50, 0x61, 0x74, 0x68,
	0x43, 0x46, 0x52, 0x05, 0x70, 0x61, 0x74, 0x68, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x11, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x63, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x49, 0x0a, 0x10, 0x64, 0x72, 0x79, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xfa, 0x42,
	0x1a, 0x72, 0x18, 0x52, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x52, 0x06, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x64, 0x72, 0x79,
	0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x12, 0x16, 0x0a,
	0x05, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x05,
	0x70, 0x72, 0x75, 0x6e, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x18, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f,
	0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x27, 0xfa, 0x42, 0x24, 0x72, 0x22, 0x52,
	0x00, 0x52, 0x06, 0x6f, 0x72, 0x70, 0x68, 0x61, 0x6e, 0x52, 0x0a, 0x62, 0x61, 0x63, 0x6b, 0x67,
	0x72, 0x6f, 0x75, 0x6e, 0x64, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x65, 0x67, 0x72, 0x6f, 0x75, 0x6e,
	0x64, 0x52, 0x18, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x70, 0x72, 0x6f, 0x70, 0x61, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x10, 0x69,
	0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x35, 0xfa, 0x42, 0x32, 0x72, 0x30, 0x52, 0x00, 0x52, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x15, 0x61, 0x64, 0x6f, 0x70,
	0x74, 0x5f, 0x69, 0x66, 0x5f, 0x6e, 0x6f, 0x5f, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x52, 0x09, 0x61, 0x64, 0x6f, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x6c, 0x52, 0x10, 0x69, 0x6e,
	0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x31,
	0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x63, 0x66, 0x67, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x43, 0x46, 0x52, 0x03, 0x72, 0x65,
	0x66, 0x42, 0x0d, 0x0a, 0x0b, 0x70, 0x72, 0x75, 0x6e, 0x65, 0x5f, 0x6f, 0x6e, 0x65, 0x6f, 0x66,
	0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x02, 0x10, 0x03, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x22, 0x79, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x43, 0x46, 0x12,
	0x1b, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x21, 0x0a, 0x06,
	0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x06, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12,
	0x21, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x42, 0x0a, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x76,
	0x0a, 0x14, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x43, 0x46, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x47, 0x69, 0x74, 0x52, 0x65, 0x66, 0x43,
	0x46, 0x52, 0x03, 0x72, 0x65, 0x66, 0x22, 0x71, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x46, 0x12, 0x51, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67,
	0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48,
	0x00, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x0d, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xb6, 0x02, 0x0a, 0x07, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x43, 0x46, 0x12, 0x2b, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02,
	0x10, 0x01, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x66, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x43, 0x46,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74,
	0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02,
	0x20, 0x00, 0x48, 0x01, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x22, 0xa0, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x46, 0x12, 0x2c, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x48, 0x00, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x03, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x47, 0x69, 0x74, 0x52,
	0x65, 0x66, 0x43, 0x46, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x04, 0x66, 0x69, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01,
	0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x72, 0x6c, 0x43, 0x46, 0x12, 0x1a, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x72, 0x03, 0x88, 0x01,
	0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x45, 0x0a, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00,
	0x52, 0x0b, 0x70, 0x6f, 0x6c, 0x6c, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x32, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x2a, 0x02, 0x20, 0x00, 0x48, 0x00, 0x52,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x88, 0x01,
	0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0xea, 0x01, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x73, 0x43, 0x46, 0x12, 0x3b, 0x0a, 0x06, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x69, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a,
	0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x04, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x45, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66,
	0x67, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x55, 0x72, 0x6c,
	0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x03,
	0x75, 0x72, 0x6c, 0x42, 0x0b, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x03, 0xf8, 0x42, 0x01,
	0x22, 0x9a, 0x01, 0x0a, 0x08, 0x47, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x43, 0x46, 0x12, 0x56, 0x0a,
	0x11, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67,
	0x2e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x43, 0x46, 0x52, 0x11, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x74, 0x43, 0x46, 0x52, 0x06, 0x63, 0x68, 0x61, 0x72, 0x74, 0x73, 0x22, 0x4d, 0x0a,
	0x0f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x46,
	0x12, 0x3a, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e,
	0x67, 0x43, 0x46, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x22, 0xa3, 0x01, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x43, 0x46, 0x12, 0x3b, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66,
	0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d,
	0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x4a, 0x0a, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x5f,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x63, 0x66, 0x67, 0x2e, 0x6c, 0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e,
	0x75, 0x6d, 0x48, 0x00, 0x52, 0x0a, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x67, 0x72, 0x70, 0x63, 0x5f, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x22, 0x92, 0x01, 0x0a, 0x0a, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43,
	0x46, 0x12, 0x44, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x46, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e,
	0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x46, 0x52,
	0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x43, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x46, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e,
	0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x46, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x43, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x46, 0x12, 0x17, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02,
	0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e,
	0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x46, 0x52, 0x09, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa,
	0x42, 0x09, 0x92, 0x01, 0x06, 0x22, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x0c, 0x65, 0x6e, 0x76,
	0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x91, 0x02, 0x0a, 0x0c, 0x43, 0x69,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x46, 0x12, 0x4a, 0x0a, 0x05, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c,
	0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66,
	0x67, 0x2e, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x41, 0x67, 0x65, 0x6e,
	0x74, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52,
	0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0b, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73,
	0x6f, 0x6e, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69,
	0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74,
	0x63, 0x66, 0x67, 0x2e, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x49, 0x6d,
	0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74, 0x65, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05,
	0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f,
	0x6e, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x06, 0x63, 0x69, 0x5f, 0x6a, 0x6f, 0x62, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x69, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x69, 0x4a, 0x6f, 0x62, 0x43, 0x46, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x06, 0x63, 0x69, 0x5f, 0x6a,
	0x6f, 0x62, 0x42, 0x09, 0x0a, 0x02, 0x61, 0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0x13, 0x0a,
	0x11, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x41, 0x67, 0x65, 0x6e, 0x74,
	0x43, 0x46, 0x22, 0x13, 0x0a, 0x11, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73,
	0x43, 0x69, 0x4a, 0x6f, 0x62, 0x43, 0x46, 0x22, 0xb2, 0x01, 0x0a, 0x17, 0x43, 0x69, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x49, 0x6d, 0x70, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x74,
	0x65, 0x43, 0x46, 0x12, 0x23, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x92, 0x01, 0x06,
	0x22, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64,
	0x12, 0x3a, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x43, 0x46, 0x52, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x22, 0x4c, 0x0a, 0x0d,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x43, 0x46, 0x12, 0x19, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x20, 0x01, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0e, 0xfa, 0x42, 0x0b, 0x92, 0x01, 0x08, 0x08, 0x01, 0x22,
	0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x22, 0xdd, 0x01, 0x0a, 0x0c, 0x55,
	0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x46, 0x12, 0x43, 0x0a, 0x09, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x41, 0x73, 0x43, 0x46, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x61, 0x73,
	0x12, 0x46, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x46, 0x52, 0x08,
	0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x40, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x43, 0x46, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x2e, 0x0a, 0x13, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x43,
	0x46, 0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x43, 0x46, 0x12,
	0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x20, 0x01, 0x52, 0x02, 0x69, 0x64, 0x22, 0xb4, 0x01, 0x0a, 0x0e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x43, 0x46, 0x12, 0x4c, 0x0a, 0x05, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x66, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01,
	0x48, 0x00, 0x52, 0x05, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62,
	0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x46, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x48, 0x00, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x42, 0x09, 0x0a, 0x02, 0x61, 0x73, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22,
	0x15, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x41,
	0x67, 0x65, 0x6e, 0x74, 0x43, 0x46, 0x22, 0x14, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x41, 0x73, 0x55, 0x73, 0x65, 0x72, 0x43, 0x46, 0x22, 0xfb, 0x01, 0x0a,
	0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69,
	0x6e, 0x67, 0x43, 0x46, 0x12, 0x5e, 0x0a, 0x14, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x56, 0x75, 0x6c, 0x6e, 0x65,
	0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x14,
	0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x20, 0x01, 0x52, 0x07,
	0x63, 0x61, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x61, 0x0a, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x7f, 0x0a, 0x13, 0x56, 0x75,
	0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x73, 0x12, 0x48, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x22, 0x8d, 0x01, 0x0a, 0x17,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e,
	0x67, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x69, 0x6e, 0x64, 0x73, 0x22, 0x8c, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67,
	0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x3b, 0x0a,
	0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x34, 0x0a, 0x08, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x70, 0x75, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x6d, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79,
	0x22, 0x88, 0x04, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x47,
	0x69, 0x74, 0x6f, 0x70, 0x73, 0x43, 0x46, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x12,
	0x4c, 0x0a, 0x0d, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x4f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x46, 0x52, 0x0d,
	0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x09, 0x63, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x69, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x43, 0x46, 0x52, 0x09, 0x63, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x5a,
	0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x69, 0x74,
	0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x43, 0x46, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x45, 0x0a, 0x0b, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x46, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x4f, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x46, 0x52, 0x12,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x75, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x43, 0x46, 0x52,
	0x04, 0x66, 0x6c, 0x75, 0x78, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xcc, 0x04, 0x0a, 0x12,
	0x41, 0x67, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x06, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x47, 0x69, 0x74, 0x6f, 0x70,
	0x73, 0x43, 0x46, 0x52, 0x06, 0x67, 0x69, 0x74, 0x6f, 0x70, 0x73, 0x12, 0x4c, 0x0a, 0x0d, 0x6f,
	0x62, 0x73, 0x65, 0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x43, 0x46, 0x52, 0x0d, 0x6f, 0x62, 0x73, 0x65,
	0x72, 0x76, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x49, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x63, 0x69, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43,
	0x69, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x46, 0x52, 0x08, 0x63, 0x69, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x12, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72,
	0x5f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x43, 0x46, 0x52, 0x11, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x61, 0x74,
	0x68, 0x12, 0x4e, 0x0a, 0x12, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x76, 0x65,
	0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61, 0x67, 0x65,
	0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x46, 0x52, 0x11,
	0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x31, 0x0a, 0x04, 0x66, 0x6c, 0x75, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2e, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x2e, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x63, 0x66, 0x67, 0x2e, 0x46, 0x6c, 0x75, 0x78, 0x43, 0x46, 0x52, 0x04,
	0x66, 0x6c, 0x75, 0x78, 0x12, 0x2e, 0x0a, 0x13, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x5f, 0x65,
	0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x55, 0x72, 0x6c, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xf0, 0x01, 0x0a, 0x08, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x46, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x6e, 0x73, 0x5f, 0x7a, 0x6f, 0x6e, 0x65, 0x12, 0x59, 0x0a,
	0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a,
	0x00, 0x52, 0x15, 0x70, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x53, 0x0a, 0x12, 0x66, 0x75, 0x6c, 0x6c,
	0x5f, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x08, 0xfa, 0x42, 0x05, 0xaa, 0x01, 0x02, 0x2a, 0x00, 0x52, 0x12, 0x66, 0x75, 0x6c, 0x6c, 0x5f,
	0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0x3c, 0x0a,
	0x06, 0x46, 0x6c, 0x75, 0x78, 0x43, 0x46, 0x12, 0x32, 0x0a, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f,
	0x6f, 0x6b, 0x5f, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x77, 0x65, 0x62, 0x68, 0x6f, 0x6f, 0x6b, 0x5f, 0x72,
	0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x2a, 0x3a, 0x0a, 0x0e, 0x6c,
	0x6f, 0x67, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x08, 0x0a,
	0x04, 0x69, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x64, 0x65, 0x62, 0x75, 0x67,
	0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x77, 0x61, 0x72, 0x6e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x42, 0x49, 0x5a, 0x47, 0x67, 0x69, 0x74, 0x6c, 0x61,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2d, 0x6f, 0x72, 0x67,
	0x2f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x2d, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x61, 0x62, 0x2d, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x2f, 0x76, 0x31, 0x36, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x63,
	0x66, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_agentcfg_agentcfg_proto_rawDescOnce sync.Once
	file_pkg_agentcfg_agentcfg_proto_rawDescData = file_pkg_agentcfg_agentcfg_proto_rawDesc
)

func file_pkg_agentcfg_agentcfg_proto_rawDescGZIP() []byte {
	file_pkg_agentcfg_agentcfg_proto_rawDescOnce.Do(func() {
		file_pkg_agentcfg_agentcfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_agentcfg_agentcfg_proto_rawDescData)
	})
	return file_pkg_agentcfg_agentcfg_proto_rawDescData
}

var file_pkg_agentcfg_agentcfg_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_agentcfg_agentcfg_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_pkg_agentcfg_agentcfg_proto_goTypes = []interface{}{
	(LogLevelEnum)(0),               // 0: gitlab.agent.agentcfg.log_level_enum
	(*PathCF)(nil),                  // 1: gitlab.agent.agentcfg.PathCF
	(*ManifestProjectCF)(nil),       // 2: gitlab.agent.agentcfg.ManifestProjectCF
	(*GitRefCF)(nil),                // 3: gitlab.agent.agentcfg.GitRefCF
	(*ChartProjectSourceCF)(nil),    // 4: gitlab.agent.agentcfg.ChartProjectSourceCF
	(*ChartSourceCF)(nil),           // 5: gitlab.agent.agentcfg.ChartSourceCF
	(*ChartCF)(nil),                 // 6: gitlab.agent.agentcfg.ChartCF
	(*ChartValuesFileCF)(nil),       // 7: gitlab.agent.agentcfg.ChartValuesFileCF
	(*ChartValuesUrlCF)(nil),        // 8: gitlab.agent.agentcfg.ChartValuesUrlCF
	(*ChartValuesCF)(nil),           // 9: gitlab.agent.agentcfg.ChartValuesCF
	(*GitopsCF)(nil),                // 10: gitlab.agent.agentcfg.GitopsCF
	(*ObservabilityCF)(nil),         // 11: gitlab.agent.agentcfg.ObservabilityCF
	(*LoggingCF)(nil),               // 12: gitlab.agent.agentcfg.LoggingCF
	(*CiAccessCF)(nil),              // 13: gitlab.agent.agentcfg.CiAccessCF
	(*CiAccessProjectCF)(nil),       // 14: gitlab.agent.agentcfg.CiAccessProjectCF
	(*CiAccessGroupCF)(nil),         // 15: gitlab.agent.agentcfg.CiAccessGroupCF
	(*CiAccessAsCF)(nil),            // 16: gitlab.agent.agentcfg.CiAccessAsCF
	(*CiAccessAsAgentCF)(nil),       // 17: gitlab.agent.agentcfg.CiAccessAsAgentCF
	(*CiAccessAsCiJobCF)(nil),       // 18: gitlab.agent.agentcfg.CiAccessAsCiJobCF
	(*CiAccessAsImpersonateCF)(nil), // 19: gitlab.agent.agentcfg.CiAccessAsImpersonateCF
	(*ExtraKeyValCF)(nil),           // 20: gitlab.agent.agentcfg.ExtraKeyValCF
	(*UserAccessCF)(nil),            // 21: gitlab.agent.agentcfg.UserAccessCF
	(*UserAccessProjectCF)(nil),     // 22: gitlab.agent.agentcfg.UserAccessProjectCF
	(*UserAccessGroupCF)(nil),       // 23: gitlab.agent.agentcfg.UserAccessGroupCF
	(*UserAccessAsCF)(nil),          // 24: gitlab.agent.agentcfg.UserAccessAsCF
	(*UserAccessAsAgentCF)(nil),     // 25: gitlab.agent.agentcfg.UserAccessAsAgentCF
	(*UserAccessAsUserCF)(nil),      // 26: gitlab.agent.agentcfg.UserAccessAsUserCF
	(*ContainerScanningCF)(nil),     // 27: gitlab.agent.agentcfg.ContainerScanningCF
	(*VulnerabilityReport)(nil),     // 28: gitlab.agent.agentcfg.VulnerabilityReport
	(*ContainerScanningFilter)(nil), // 29: gitlab.agent.agentcfg.ContainerScanningFilter
	(*ResourceRequirements)(nil),    // 30: gitlab.agent.agentcfg.ResourceRequirements
	(*Resource)(nil),                // 31: gitlab.agent.agentcfg.Resource
	(*ConfigurationFile)(nil),       // 32: gitlab.agent.agentcfg.ConfigurationFile
	(*AgentConfiguration)(nil),      // 33: gitlab.agent.agentcfg.AgentConfiguration
	(*RemoteCF)(nil),                // 34: gitlab.agent.agentcfg.RemoteCF
	(*FluxCF)(nil),                  // 35: gitlab.agent.agentcfg.FluxCF
	(*durationpb.Duration)(nil),     // 36: google.protobuf.Duration
	(*structpb.Struct)(nil),         // 37: google.protobuf.Struct
}
var file_pkg_agentcfg_agentcfg_proto_depIdxs = []int32{
	1,  // 0: gitlab.agent.agentcfg.ManifestProjectCF.paths:type_name -> gitlab.agent.agentcfg.PathCF
	36, // 1: gitlab.agent.agentcfg.ManifestProjectCF.reconcile_timeout:type_name -> google.protobuf.Duration
	36, // 2: gitlab.agent.agentcfg.ManifestProjectCF.prune_timeout:type_name -> google.protobuf.Duration
	3,  // 3: gitlab.agent.agentcfg.ManifestProjectCF.ref:type_name -> gitlab.agent.agentcfg.GitRefCF
	3,  // 4: gitlab.agent.agentcfg.ChartProjectSourceCF.ref:type_name -> gitlab.agent.agentcfg.GitRefCF
	4,  // 5: gitlab.agent.agentcfg.ChartSourceCF.project:type_name -> gitlab.agent.agentcfg.ChartProjectSourceCF
	5,  // 6: gitlab.agent.agentcfg.ChartCF.source:type_name -> gitlab.agent.agentcfg.ChartSourceCF
	9,  // 7: gitlab.agent.agentcfg.ChartCF.values:type_name -> gitlab.agent.agentcfg.ChartValuesCF
	3,  // 8: gitlab.agent.agentcfg.ChartValuesFileCF.ref:type_name -> gitlab.agent.agentcfg.GitRefCF
	36, // 9: gitlab.agent.agentcfg.ChartValuesUrlCF.poll_period:type_name -> google.protobuf.Duration
	37, // 10: gitlab.agent.agentcfg.ChartValuesCF.inline:type_name -> google.protobuf.Struct
	7,  // 11: gitlab.agent.agentcfg.ChartValuesCF.file:type_name -> gitlab.agent.agentcfg.ChartValuesFileCF
	8,  // 12: gitlab.agent.agentcfg.ChartValuesCF.url:type_name -> gitlab.agent.agentcfg.ChartValuesUrlCF
	2,  // 13: gitlab.agent.agentcfg.GitopsCF.manifest_projects:type_name -> gitlab.agent.agentcfg.ManifestProjectCF
	6,  // 14: gitlab.agent.agentcfg.GitopsCF.charts:type_name -> gitlab.agent.agentcfg.ChartCF
	12, // 15: gitlab.agent.agentcfg.ObservabilityCF.logging:type_name -> gitlab.agent.agentcfg.LoggingCF
	0,  // 16: gitlab.agent.agentcfg.LoggingCF.level:type_name -> gitlab.agent.agentcfg.log_level_enum
	0,  // 17: gitlab.agent.agentcfg.LoggingCF.grpc_level:type_name -> gitlab.agent.agentcfg.log_level_enum
	14, // 18: gitlab.agent.agentcfg.CiAccessCF.projects:type_name -> gitlab.agent.agentcfg.CiAccessProjectCF
	15, // 19: gitlab.agent.agentcfg.CiAccessCF.groups:type_name -> gitlab.agent.agentcfg.CiAccessGroupCF
	16, // 20: gitlab.agent.agentcfg.CiAccessProjectCF.access_as:type_name -> gitlab.agent.agentcfg.CiAccessAsCF
	16, // 21: gitlab.agent.agentcfg.CiAccessGroupCF.access_as:type_name -> gitlab.agent.agentcfg.CiAccessAsCF
	17, // 22: gitlab.agent.agentcfg.CiAccessAsCF.agent:type_name -> gitlab.agent.agentcfg.CiAccessAsAgentCF
	19, // 23: gitlab.agent.agentcfg.CiAccessAsCF.impersonate:type_name -> gitlab.agent.agentcfg.CiAccessAsImpersonateCF
	18, // 24: gitlab.agent.agentcfg.CiAccessAsCF.ci_job:type_name -> gitlab.agent.agentcfg.CiAccessAsCiJobCF
	20, // 25: gitlab.agent.agentcfg.CiAccessAsImpersonateCF.extra:type_name -> gitlab.agent.agentcfg.ExtraKeyValCF
	24, // 26: gitlab.agent.agentcfg.UserAccessCF.access_as:type_name -> gitlab.agent.agentcfg.UserAccessAsCF
	22, // 27: gitlab.agent.agentcfg.UserAccessCF.projects:type_name -> gitlab.agent.agentcfg.UserAccessProjectCF
	23, // 28: gitlab.agent.agentcfg.UserAccessCF.groups:type_name -> gitlab.agent.agentcfg.UserAccessGroupCF
	25, // 29: gitlab.agent.agentcfg.UserAccessAsCF.agent:type_name -> gitlab.agent.agentcfg.UserAccessAsAgentCF
	26, // 30: gitlab.agent.agentcfg.UserAccessAsCF.user:type_name -> gitlab.agent.agentcfg.UserAccessAsUserCF
	28, // 31: gitlab.agent.agentcfg.ContainerScanningCF.vulnerability_report:type_name -> gitlab.agent.agentcfg.VulnerabilityReport
	30, // 32: gitlab.agent.agentcfg.ContainerScanningCF.resource_requirements:type_name -> gitlab.agent.agentcfg.ResourceRequirements
	29, // 33: gitlab.agent.agentcfg.VulnerabilityReport.filters:type_name -> gitlab.agent.agentcfg.ContainerScanningFilter
	31, // 34: gitlab.agent.agentcfg.ResourceRequirements.limits:type_name -> gitlab.agent.agentcfg.Resource
	31, // 35: gitlab.agent.agentcfg.ResourceRequirements.requests:type_name -> gitlab.agent.agentcfg.Resource
	10, // 36: gitlab.agent.agentcfg.ConfigurationFile.gitops:type_name -> gitlab.agent.agentcfg.GitopsCF
	11, // 37: gitlab.agent.agentcfg.ConfigurationFile.observability:type_name -> gitlab.agent.agentcfg.ObservabilityCF
	13, // 38: gitlab.agent.agentcfg.ConfigurationFile.ci_access:type_name -> gitlab.agent.agentcfg.CiAccessCF
	27, // 39: gitlab.agent.agentcfg.ConfigurationFile.container_scanning:type_name -> gitlab.agent.agentcfg.ContainerScanningCF
	21, // 40: gitlab.agent.agentcfg.ConfigurationFile.user_access:type_name -> gitlab.agent.agentcfg.UserAccessCF
	34, // 41: gitlab.agent.agentcfg.ConfigurationFile.remote_development:type_name -> gitlab.agent.agentcfg.RemoteCF
	35, // 42: gitlab.agent.agentcfg.ConfigurationFile.flux:type_name -> gitlab.agent.agentcfg.FluxCF
	10, // 43: gitlab.agent.agentcfg.AgentConfiguration.gitops:type_name -> gitlab.agent.agentcfg.GitopsCF
	11, // 44: gitlab.agent.agentcfg.AgentConfiguration.observability:type_name -> gitlab.agent.agentcfg.ObservabilityCF
	13, // 45: gitlab.agent.agentcfg.AgentConfiguration.ci_access:type_name -> gitlab.agent.agentcfg.CiAccessCF
	27, // 46: gitlab.agent.agentcfg.AgentConfiguration.container_scanning:type_name -> gitlab.agent.agentcfg.ContainerScanningCF
	34, // 47: gitlab.agent.agentcfg.AgentConfiguration.remote_development:type_name -> gitlab.agent.agentcfg.RemoteCF
	35, // 48: gitlab.agent.agentcfg.AgentConfiguration.flux:type_name -> gitlab.agent.agentcfg.FluxCF
	36, // 49: gitlab.agent.agentcfg.RemoteCF.partial_sync_interval:type_name -> google.protobuf.Duration
	36, // 50: gitlab.agent.agentcfg.RemoteCF.full_sync_interval:type_name -> google.protobuf.Duration
	51, // [51:51] is the sub-list for method output_type
	51, // [51:51] is the sub-list for method input_type
	51, // [51:51] is the sub-list for extension type_name
	51, // [51:51] is the sub-list for extension extendee
	0,  // [0:51] is the sub-list for field type_name
}

func init() { file_pkg_agentcfg_agentcfg_proto_init() }
func file_pkg_agentcfg_agentcfg_proto_init() {
	if File_pkg_agentcfg_agentcfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_agentcfg_agentcfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PathCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManifestProjectCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitRefCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartProjectSourceCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartSourceCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartValuesFileCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartValuesUrlCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChartValuesCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GitopsCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObservabilityCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoggingCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessProjectCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessGroupCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessAsCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessAsAgentCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessAsCiJobCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CiAccessAsImpersonateCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExtraKeyValCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessProjectCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessGroupCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessAsCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessAsAgentCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserAccessAsUserCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerScanningCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VulnerabilityReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContainerScanningFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceRequirements); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Resource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AgentConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_agentcfg_agentcfg_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FluxCF); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*ManifestProjectCF_Prune)(nil),
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*GitRefCF_Tag)(nil),
		(*GitRefCF_Branch)(nil),
		(*GitRefCF_Commit)(nil),
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*ChartSourceCF_Project)(nil),
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ChartValuesCF_Inline)(nil),
		(*ChartValuesCF_File)(nil),
		(*ChartValuesCF_Url)(nil),
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*CiAccessAsCF_Agent)(nil),
		(*CiAccessAsCF_Impersonate)(nil),
		(*CiAccessAsCF_CiJob)(nil),
	}
	file_pkg_agentcfg_agentcfg_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*UserAccessAsCF_Agent)(nil),
		(*UserAccessAsCF_User)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_agentcfg_agentcfg_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_agentcfg_agentcfg_proto_goTypes,
		DependencyIndexes: file_pkg_agentcfg_agentcfg_proto_depIdxs,
		EnumInfos:         file_pkg_agentcfg_agentcfg_proto_enumTypes,
		MessageInfos:      file_pkg_agentcfg_agentcfg_proto_msgTypes,
	}.Build()
	File_pkg_agentcfg_agentcfg_proto = out.File
	file_pkg_agentcfg_agentcfg_proto_rawDesc = nil
	file_pkg_agentcfg_agentcfg_proto_goTypes = nil
	file_pkg_agentcfg_agentcfg_proto_depIdxs = nil
}
