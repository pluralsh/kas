# https://docs.gitlab.com/ee/ci/yaml/README.html#workflowrules-templates
include:
  - template: Workflows/MergeRequest-Pipelines.gitlab-ci.yml
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Container-Scanning.gitlab-ci.yml
  - project: "gitlab-org/quality/pipeline-common"
    file:
      - "/ci/danger-review.yml"

default:
  tags:
    - gitlab-org

variables:
  # Image built using https://gitlab.com/gitlab-org/cluster-integration/gitlab-agent-ci-image
  # and pushed into https://hub.docker.com/repository/docker/gitlab/gitlab-agent-ci-image
  BUILD_IMAGE_NAME: "gitlab/gitlab-agent-ci-image"
  # must use image digest to invalidate cache if image is updated.
  BUILD_IMAGE_SHA: "latest@sha256:69c88bd673b5b99aad4ffc933fbf357fd24322d85501a3238c35b61ad7404f9e"
  FIPS_BUILD_IMAGE_SHA: "latest-fips@sha256:d5668d3f6dd9f5b1be74ad39f8ee4578ebf6501f6f7cb4db9dc3cbd1a94702b4"
  SECURE_ANALYZERS_PREFIX: "registry.gitlab.com/gitlab-org/security-products/analyzers"
  CS_MAJOR_VERSION: 2
  DOCKER_VERSION: "24.0.2" # https://hub.docker.com/_/docker
  DOCKER_TLS_CERTDIR: "/certs"

stages:
  - test
  - scan
  - push_image
  - create_release

danger-review:
  allow_failure: true
  variables:
    GITLAB_DANGERFILES_VERSION: "3.7.0"

.bazel_build:
  image:
    name: "$BUILD_IMAGE_NAME:$BUILD_IMAGE_SHA"
    entrypoint: [""]
  before_script:
    - echo "build --verbose_failures" >> .bazelrc
    - echo "build --curses=no" >> .bazelrc
    - echo "build --show_timestamps" >> .bazelrc
    - |
      if [[ -f "$GOOGLE_APPLICATION_CREDENTIALS" ]]; then
        echo "build --google_default_credentials" >> .bazelrc
        echo "build --remote_cache=https://storage.googleapis.com/gitlab-kubernetes-test-bucket/$(cat .bazelversion)-$BUILD_IMAGE_SHA" >> .bazelrc
        echo "build --remote_download_minimal" >> .bazelrc
        echo "run --remote_download_outputs=toplevel" >> .bazelrc
      fi
    - echo "test --test_output=all" >> .bazelrc
    - echo "test --test_arg=-test.v" >> .bazelrc
  #    - echo "build --sandbox_base=/dev/shm" >> .bazelrc # disabled because it's not big enough

.registry_creds: &registry_creds
  - mkdir -p "$HOME/.docker"
  - |
    credentials=$(echo -n "$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD" | base64)
    cat << EOF > "$HOME/.docker/config.json"
    {
      "auths": {
          "$CI_REGISTRY": {
            "auth": "$credentials"
          }
      }
    }
    EOF

test:
  stage: test
  extends: .bazel_build
  services:
    - redis
  script:
    - echo 'test --test_env=REDIS_URL=redis://redis:6379' >> .bazelrc
    - make test-ci
    - *registry_creds
    - if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then make release-latest; fi

test-fips:
  image: "docker:${DOCKER_VERSION}"
  services:
    - "docker:${DOCKER_VERSION}-dind"
    - redis
  stage: test
  parallel:
    matrix:
      - ARCH: arm64
        RUNNER_TAG: arm64
        RUN_IN_FORKS: 'false'
      - ARCH: amd64
        RUNNER_TAG: saas-linux-large-amd64
        RUN_IN_FORKS: 'true'
  tags:
    - "${RUNNER_TAG}"
  script:
    - export REDIS_URL=redis://redis:6379
    - docker run --rm --platform "linux/${ARCH}" --entrypoint /bin/sh -v "$(pwd):/src" -w /src "${BUILD_IMAGE_NAME}:${FIPS_BUILD_IMAGE_SHA}" -c 'make test-ci-fips'
  rules:
    - if: '$RUN_IN_FORKS || $CI_PROJECT_PATH == "gitlab-org/cluster-integration/gitlab-agent"'

verify:
  stage: test
  extends: .bazel_build
  script:
    - make verify-ci

lint:
  image: golangci/golangci-lint:v1.52.2-alpine
  stage: test
  script:
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description
    - apk --no-cache add jq
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.location.path):\(.location.lines.begin) \(.description)"'
  artifacts:
    reports:
      codequality: gl-code-quality-report.json
    paths:
      - gl-code-quality-report.json

# You can override the included template(s) by including variable overrides
# See https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#priority-of-environment-variables
sast:
  variables:
    # We already run gosec as part of the lint job, no point in running it again here.
    SAST_DEFAULT_ANALYZERS: kubesec
    SCAN_KUBERNETES_MANIFESTS: "true"
  stage: test

push_image_tag:
  stage: push_image
  extends: .bazel_build
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - *registry_creds
    - git fetch
    - >
      if [[ $(git branch --remotes --contains "tags/${CI_COMMIT_TAG}" | grep "${CI_DEFAULT_BRANCH}") ]]; then
         make release-tag release-stable
      else
         make release-tag
      fi

push_image_tag_fips:
  stage: push_image
  image:
    name: "${BUILD_IMAGE_NAME}:${FIPS_BUILD_IMAGE_SHA}"
    entrypoint: [""]
  services:
    - "docker:${DOCKER_VERSION}-dind"
  parallel:
    matrix:
      - ARCH: arm64
        RUNNER_TAG: arm64
        RUN_IN_FORKS: 'false'
      - ARCH: amd64
        RUNNER_TAG: saas-linux-large-amd64
        RUN_IN_FORKS: 'true'
  tags:
    - "${RUNNER_TAG}"
  variables:
    BUILDER_IMAGE: "${BUILD_IMAGE_NAME}:${FIPS_BUILD_IMAGE_SHA}"
    # Docker vars are documented here https://docs.docker.com/engine/reference/commandline/cli/
    # Vars below mimic logic from https://github.com/docker-library/docker/blob/master/20.10/cli/docker-entrypoint.sh
    # Daemon logic: https://github.com/docker-library/docker/blob/master/20.10/dind/dockerd-entrypoint.sh
    DOCKER_HOST: "tcp://docker:2376"
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: "${DOCKER_TLS_CERTDIR}/client"
  rules:
    - if: '$CI_COMMIT_TAG && ($RUN_IN_FORKS || $CI_PROJECT_PATH == "gitlab-org/cluster-integration/gitlab-agent")'
  script:
    - *registry_creds
    - make release-tag-fips
    - git fetch
    - >
      if [[ $(git branch --remotes --contains "tags/${CI_COMMIT_TAG}" | grep "${CI_DEFAULT_BRANCH}") ]]; then
         make release-tag-and-stable-fips
      else
         make release-tag-fips
      fi

push_image_tag_fips_manifest:
  stage: push_image
  image:
    name: "${BUILD_IMAGE_NAME}:${FIPS_BUILD_IMAGE_SHA}"
    entrypoint: [""]
  services:
    - "docker:${DOCKER_VERSION}-dind"
  variables:
    BUILDER_IMAGE: "${BUILD_IMAGE_NAME}:${FIPS_BUILD_IMAGE_SHA}"
    # Docker vars are documented here https://docs.docker.com/engine/reference/commandline/cli/
    # Vars below mimic logic from https://github.com/docker-library/docker/blob/master/20.10/cli/docker-entrypoint.sh
    # Daemon logic: https://github.com/docker-library/docker/blob/master/20.10/dind/dockerd-entrypoint.sh
    DOCKER_HOST: "tcp://docker:2376"
    DOCKER_TLS_VERIFY: "1"
    DOCKER_CERT_PATH: "${DOCKER_TLS_CERTDIR}/client"
  needs: ["push_image_tag_fips"]
  rules:
    - if: $CI_COMMIT_TAG
  script:
    - *registry_creds
    - git fetch
    - >
      if [[ $(git branch --remotes --contains "tags/${CI_COMMIT_TAG}" | grep "${CI_DEFAULT_BRANCH}") ]]; then
         make release-tag-and-stable-fips-manifest
      else
         make release-tag-fips-manifest
      fi

push_image_manual:
  stage: push_image
  extends: .bazel_build
  rules:
    # Allow creating releases manually for any branch or tag.
    - when: manual
      allow_failure: true
  script:
    - *registry_creds
    - make release-commit

create_release:
  stage: create_release
  rules:
    - if: $CI_COMMIT_TAG
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  script:
    - echo 'release job'
  release:
    name: "$CI_COMMIT_TAG"
    tag_name: "$CI_COMMIT_TAG"
    ref: "$CI_COMMIT_TAG"
    description: "Release for tag $CI_COMMIT_TAG"

# Broken, disable for now https://gitlab.com/gitlab-org/cluster-integration/gitlab-agent/-/jobs/2308411911
## see https://docs.gitlab.com/ee/user/project/code_intelligence.html#configuration
#code_navigation:
#  image: sourcegraph/lsif-go:v1
#  allow_failure: true # recommended
#  script:
#    - lsif-go
#  artifacts:
#    reports:
#      lsif: dump.lsif

container_scanning:
  stage: scan
  variables:
    CI_APPLICATION_REPOSITORY: "$CI_REGISTRY_IMAGE/agentk"
    CI_APPLICATION_TAG: latest

# enable container scanning with https://gitlab.com/gitlab-com/gl-security/appsec/container-scanners
appsec_container_scanning:
  stage: scan
  image: registry.gitlab.com/gitlab-com/gl-security/appsec/container-scanners:latest
  environment:
    name: appsec_container_scanning
    action: prepare
  script:
    - /run/appsec-container-scan "$CI_REGISTRY_IMAGE/agentk:latest,$CI_REGISTRY_IMAGE/agentk:latest-race,$CI_REGISTRY_IMAGE/agentk-fips:stable" > gl-container-scanning-report.json
  artifacts:
    reports:
      container_scanning: gl-container-scanning-report.json
  rules:
    # Skip on forks, because external contributors can't run this pipeline
    - if: $CONTAINER_SCAN_PIPELINE_TRIGGER_TOKEN
      allow_failure: true

build-package-and-qa:
  stage: test
  trigger:
    project: 'gitlab-org/build/omnibus-gitlab-mirror'
    branch: 'master'
  inherit:
    variables: false
  variables:
    GITLAB_KAS_VERSION: $CI_MERGE_REQUEST_SOURCE_BRANCH_SHA
    TOP_UPSTREAM_SOURCE_PROJECT: $CI_PROJECT_PATH
    TOP_UPSTREAM_SOURCE_REF: $CI_COMMIT_REF_NAME
    TOP_UPSTREAM_SOURCE_JOB: $CI_JOB_URL
    ee: "true"
  rules:
    # For MRs that change dependencies, we want to automatically ensure builds
    # aren't broken. In such cases, we don't want the QA tests to be run
    # automatically, but still available for developers to manually run.
    - if: '$CI_MERGE_REQUEST_IID'
      changes:
        - go.sum
      variables:
        BUILD_ON_ALL_OS: "true"
        MANUAL_QA_TEST: "true"
      allow_failure: false
    # For other MRs, we still provide this job as a manual job for developers
    # to obtain a package for testing and run QA tests.
    - if: '$CI_MERGE_REQUEST_IID'
      when: manual
      allow_failure: true
  needs: []
