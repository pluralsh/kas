// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/gitaly (interfaces: PoolInterface,FetchVisitor,PathEntryVisitor,FileVisitor,PathFetcherInterface,PollerInterface)
//
// Generated by this command:
//
//	mockgen -typed -destination internalgitaly.go -package mock_internalgitaly gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/gitaly PoolInterface,FetchVisitor,PathEntryVisitor,FileVisitor,PathFetcherInterface,PollerInterface
//
// Package mock_internalgitaly is a generated GoMock package.
package mock_internalgitaly

import (
	context "context"
	reflect "reflect"

	gitaly "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/gitaly"
	gitalypb "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/gitaly/vendored/gitalypb"
	entity "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/pkg/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockPoolInterface is a mock of PoolInterface interface.
type MockPoolInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPoolInterfaceMockRecorder
}

// MockPoolInterfaceMockRecorder is the mock recorder for MockPoolInterface.
type MockPoolInterfaceMockRecorder struct {
	mock *MockPoolInterface
}

// NewMockPoolInterface creates a new mock instance.
func NewMockPoolInterface(ctrl *gomock.Controller) *MockPoolInterface {
	mock := &MockPoolInterface{ctrl: ctrl}
	mock.recorder = &MockPoolInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolInterface) EXPECT() *MockPoolInterfaceMockRecorder {
	return m.recorder
}

// PathFetcher mocks base method.
func (m *MockPoolInterface) PathFetcher(arg0 context.Context, arg1 *entity.GitalyInfo) (gitaly.PathFetcherInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PathFetcher", arg0, arg1)
	ret0, _ := ret[0].(gitaly.PathFetcherInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PathFetcher indicates an expected call of PathFetcher.
func (mr *MockPoolInterfaceMockRecorder) PathFetcher(arg0, arg1 any) *PoolInterfacePathFetcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PathFetcher", reflect.TypeOf((*MockPoolInterface)(nil).PathFetcher), arg0, arg1)
	return &PoolInterfacePathFetcherCall{Call: call}
}

// PoolInterfacePathFetcherCall wrap *gomock.Call
type PoolInterfacePathFetcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolInterfacePathFetcherCall) Return(arg0 gitaly.PathFetcherInterface, arg1 error) *PoolInterfacePathFetcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolInterfacePathFetcherCall) Do(f func(context.Context, *entity.GitalyInfo) (gitaly.PathFetcherInterface, error)) *PoolInterfacePathFetcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolInterfacePathFetcherCall) DoAndReturn(f func(context.Context, *entity.GitalyInfo) (gitaly.PathFetcherInterface, error)) *PoolInterfacePathFetcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Poller mocks base method.
func (m *MockPoolInterface) Poller(arg0 context.Context, arg1 *entity.GitalyInfo) (gitaly.PollerInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poller", arg0, arg1)
	ret0, _ := ret[0].(gitaly.PollerInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poller indicates an expected call of Poller.
func (mr *MockPoolInterfaceMockRecorder) Poller(arg0, arg1 any) *PoolInterfacePollerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poller", reflect.TypeOf((*MockPoolInterface)(nil).Poller), arg0, arg1)
	return &PoolInterfacePollerCall{Call: call}
}

// PoolInterfacePollerCall wrap *gomock.Call
type PoolInterfacePollerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PoolInterfacePollerCall) Return(arg0 gitaly.PollerInterface, arg1 error) *PoolInterfacePollerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PoolInterfacePollerCall) Do(f func(context.Context, *entity.GitalyInfo) (gitaly.PollerInterface, error)) *PoolInterfacePollerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PoolInterfacePollerCall) DoAndReturn(f func(context.Context, *entity.GitalyInfo) (gitaly.PollerInterface, error)) *PoolInterfacePollerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFetchVisitor is a mock of FetchVisitor interface.
type MockFetchVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockFetchVisitorMockRecorder
}

// MockFetchVisitorMockRecorder is the mock recorder for MockFetchVisitor.
type MockFetchVisitorMockRecorder struct {
	mock *MockFetchVisitor
}

// NewMockFetchVisitor creates a new mock instance.
func NewMockFetchVisitor(ctrl *gomock.Controller) *MockFetchVisitor {
	mock := &MockFetchVisitor{ctrl: ctrl}
	mock.recorder = &MockFetchVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchVisitor) EXPECT() *MockFetchVisitorMockRecorder {
	return m.recorder
}

// Entry mocks base method.
func (m *MockFetchVisitor) Entry(arg0 *gitalypb.TreeEntry) (bool, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Entry indicates an expected call of Entry.
func (mr *MockFetchVisitorMockRecorder) Entry(arg0 any) *FetchVisitorEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockFetchVisitor)(nil).Entry), arg0)
	return &FetchVisitorEntryCall{Call: call}
}

// FetchVisitorEntryCall wrap *gomock.Call
type FetchVisitorEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FetchVisitorEntryCall) Return(arg0 bool, arg1 int64, arg2 error) *FetchVisitorEntryCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FetchVisitorEntryCall) Do(f func(*gitalypb.TreeEntry) (bool, int64, error)) *FetchVisitorEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FetchVisitorEntryCall) DoAndReturn(f func(*gitalypb.TreeEntry) (bool, int64, error)) *FetchVisitorEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EntryDone mocks base method.
func (m *MockFetchVisitor) EntryDone(arg0 *gitalypb.TreeEntry, arg1 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EntryDone", arg0, arg1)
}

// EntryDone indicates an expected call of EntryDone.
func (mr *MockFetchVisitorMockRecorder) EntryDone(arg0, arg1 any) *FetchVisitorEntryDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EntryDone", reflect.TypeOf((*MockFetchVisitor)(nil).EntryDone), arg0, arg1)
	return &FetchVisitorEntryDoneCall{Call: call}
}

// FetchVisitorEntryDoneCall wrap *gomock.Call
type FetchVisitorEntryDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FetchVisitorEntryDoneCall) Return() *FetchVisitorEntryDoneCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FetchVisitorEntryDoneCall) Do(f func(*gitalypb.TreeEntry, error)) *FetchVisitorEntryDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FetchVisitorEntryDoneCall) DoAndReturn(f func(*gitalypb.TreeEntry, error)) *FetchVisitorEntryDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StreamChunk mocks base method.
func (m *MockFetchVisitor) StreamChunk(arg0, arg1 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamChunk", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StreamChunk indicates an expected call of StreamChunk.
func (mr *MockFetchVisitorMockRecorder) StreamChunk(arg0, arg1 any) *FetchVisitorStreamChunkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamChunk", reflect.TypeOf((*MockFetchVisitor)(nil).StreamChunk), arg0, arg1)
	return &FetchVisitorStreamChunkCall{Call: call}
}

// FetchVisitorStreamChunkCall wrap *gomock.Call
type FetchVisitorStreamChunkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FetchVisitorStreamChunkCall) Return(arg0 bool, arg1 error) *FetchVisitorStreamChunkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FetchVisitorStreamChunkCall) Do(f func([]byte, []byte) (bool, error)) *FetchVisitorStreamChunkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FetchVisitorStreamChunkCall) DoAndReturn(f func([]byte, []byte) (bool, error)) *FetchVisitorStreamChunkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPathEntryVisitor is a mock of PathEntryVisitor interface.
type MockPathEntryVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockPathEntryVisitorMockRecorder
}

// MockPathEntryVisitorMockRecorder is the mock recorder for MockPathEntryVisitor.
type MockPathEntryVisitorMockRecorder struct {
	mock *MockPathEntryVisitor
}

// NewMockPathEntryVisitor creates a new mock instance.
func NewMockPathEntryVisitor(ctrl *gomock.Controller) *MockPathEntryVisitor {
	mock := &MockPathEntryVisitor{ctrl: ctrl}
	mock.recorder = &MockPathEntryVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathEntryVisitor) EXPECT() *MockPathEntryVisitorMockRecorder {
	return m.recorder
}

// Entry mocks base method.
func (m *MockPathEntryVisitor) Entry(arg0 *gitalypb.TreeEntry) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Entry", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Entry indicates an expected call of Entry.
func (mr *MockPathEntryVisitorMockRecorder) Entry(arg0 any) *PathEntryVisitorEntryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Entry", reflect.TypeOf((*MockPathEntryVisitor)(nil).Entry), arg0)
	return &PathEntryVisitorEntryCall{Call: call}
}

// PathEntryVisitorEntryCall wrap *gomock.Call
type PathEntryVisitorEntryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PathEntryVisitorEntryCall) Return(arg0 bool, arg1 error) *PathEntryVisitorEntryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PathEntryVisitorEntryCall) Do(f func(*gitalypb.TreeEntry) (bool, error)) *PathEntryVisitorEntryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PathEntryVisitorEntryCall) DoAndReturn(f func(*gitalypb.TreeEntry) (bool, error)) *PathEntryVisitorEntryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockFileVisitor is a mock of FileVisitor interface.
type MockFileVisitor struct {
	ctrl     *gomock.Controller
	recorder *MockFileVisitorMockRecorder
}

// MockFileVisitorMockRecorder is the mock recorder for MockFileVisitor.
type MockFileVisitorMockRecorder struct {
	mock *MockFileVisitor
}

// NewMockFileVisitor creates a new mock instance.
func NewMockFileVisitor(ctrl *gomock.Controller) *MockFileVisitor {
	mock := &MockFileVisitor{ctrl: ctrl}
	mock.recorder = &MockFileVisitorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileVisitor) EXPECT() *MockFileVisitorMockRecorder {
	return m.recorder
}

// Chunk mocks base method.
func (m *MockFileVisitor) Chunk(arg0 []byte) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chunk", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Chunk indicates an expected call of Chunk.
func (mr *MockFileVisitorMockRecorder) Chunk(arg0 any) *FileVisitorChunkCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chunk", reflect.TypeOf((*MockFileVisitor)(nil).Chunk), arg0)
	return &FileVisitorChunkCall{Call: call}
}

// FileVisitorChunkCall wrap *gomock.Call
type FileVisitorChunkCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *FileVisitorChunkCall) Return(arg0 bool, arg1 error) *FileVisitorChunkCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *FileVisitorChunkCall) Do(f func([]byte) (bool, error)) *FileVisitorChunkCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *FileVisitorChunkCall) DoAndReturn(f func([]byte) (bool, error)) *FileVisitorChunkCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPathFetcherInterface is a mock of PathFetcherInterface interface.
type MockPathFetcherInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPathFetcherInterfaceMockRecorder
}

// MockPathFetcherInterfaceMockRecorder is the mock recorder for MockPathFetcherInterface.
type MockPathFetcherInterfaceMockRecorder struct {
	mock *MockPathFetcherInterface
}

// NewMockPathFetcherInterface creates a new mock instance.
func NewMockPathFetcherInterface(ctrl *gomock.Controller) *MockPathFetcherInterface {
	mock := &MockPathFetcherInterface{ctrl: ctrl}
	mock.recorder = &MockPathFetcherInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPathFetcherInterface) EXPECT() *MockPathFetcherInterfaceMockRecorder {
	return m.recorder
}

// FetchFile mocks base method.
func (m *MockPathFetcherInterface) FetchFile(arg0 context.Context, arg1 *gitalypb.Repository, arg2, arg3 []byte, arg4 int64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchFile indicates an expected call of FetchFile.
func (mr *MockPathFetcherInterfaceMockRecorder) FetchFile(arg0, arg1, arg2, arg3, arg4 any) *PathFetcherInterfaceFetchFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchFile", reflect.TypeOf((*MockPathFetcherInterface)(nil).FetchFile), arg0, arg1, arg2, arg3, arg4)
	return &PathFetcherInterfaceFetchFileCall{Call: call}
}

// PathFetcherInterfaceFetchFileCall wrap *gomock.Call
type PathFetcherInterfaceFetchFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PathFetcherInterfaceFetchFileCall) Return(arg0 []byte, arg1 error) *PathFetcherInterfaceFetchFileCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PathFetcherInterfaceFetchFileCall) Do(f func(context.Context, *gitalypb.Repository, []byte, []byte, int64) ([]byte, error)) *PathFetcherInterfaceFetchFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PathFetcherInterfaceFetchFileCall) DoAndReturn(f func(context.Context, *gitalypb.Repository, []byte, []byte, int64) ([]byte, error)) *PathFetcherInterfaceFetchFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StreamFile mocks base method.
func (m *MockPathFetcherInterface) StreamFile(arg0 context.Context, arg1 *gitalypb.Repository, arg2, arg3 []byte, arg4 int64, arg5 gitaly.FileVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamFile", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// StreamFile indicates an expected call of StreamFile.
func (mr *MockPathFetcherInterfaceMockRecorder) StreamFile(arg0, arg1, arg2, arg3, arg4, arg5 any) *PathFetcherInterfaceStreamFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamFile", reflect.TypeOf((*MockPathFetcherInterface)(nil).StreamFile), arg0, arg1, arg2, arg3, arg4, arg5)
	return &PathFetcherInterfaceStreamFileCall{Call: call}
}

// PathFetcherInterfaceStreamFileCall wrap *gomock.Call
type PathFetcherInterfaceStreamFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PathFetcherInterfaceStreamFileCall) Return(arg0 error) *PathFetcherInterfaceStreamFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PathFetcherInterfaceStreamFileCall) Do(f func(context.Context, *gitalypb.Repository, []byte, []byte, int64, gitaly.FileVisitor) error) *PathFetcherInterfaceStreamFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PathFetcherInterfaceStreamFileCall) DoAndReturn(f func(context.Context, *gitalypb.Repository, []byte, []byte, int64, gitaly.FileVisitor) error) *PathFetcherInterfaceStreamFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Visit mocks base method.
func (m *MockPathFetcherInterface) Visit(arg0 context.Context, arg1 *gitalypb.Repository, arg2, arg3 []byte, arg4 bool, arg5 gitaly.FetchVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Visit", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// Visit indicates an expected call of Visit.
func (mr *MockPathFetcherInterfaceMockRecorder) Visit(arg0, arg1, arg2, arg3, arg4, arg5 any) *PathFetcherInterfaceVisitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Visit", reflect.TypeOf((*MockPathFetcherInterface)(nil).Visit), arg0, arg1, arg2, arg3, arg4, arg5)
	return &PathFetcherInterfaceVisitCall{Call: call}
}

// PathFetcherInterfaceVisitCall wrap *gomock.Call
type PathFetcherInterfaceVisitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PathFetcherInterfaceVisitCall) Return(arg0 error) *PathFetcherInterfaceVisitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PathFetcherInterfaceVisitCall) Do(f func(context.Context, *gitalypb.Repository, []byte, []byte, bool, gitaly.FetchVisitor) error) *PathFetcherInterfaceVisitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PathFetcherInterfaceVisitCall) DoAndReturn(f func(context.Context, *gitalypb.Repository, []byte, []byte, bool, gitaly.FetchVisitor) error) *PathFetcherInterfaceVisitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// VisitSingleFile mocks base method.
func (m *MockPathFetcherInterface) VisitSingleFile(arg0 context.Context, arg1 *gitalypb.Repository, arg2, arg3 []byte, arg4 gitaly.FetchVisitor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VisitSingleFile", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// VisitSingleFile indicates an expected call of VisitSingleFile.
func (mr *MockPathFetcherInterfaceMockRecorder) VisitSingleFile(arg0, arg1, arg2, arg3, arg4 any) *PathFetcherInterfaceVisitSingleFileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VisitSingleFile", reflect.TypeOf((*MockPathFetcherInterface)(nil).VisitSingleFile), arg0, arg1, arg2, arg3, arg4)
	return &PathFetcherInterfaceVisitSingleFileCall{Call: call}
}

// PathFetcherInterfaceVisitSingleFileCall wrap *gomock.Call
type PathFetcherInterfaceVisitSingleFileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PathFetcherInterfaceVisitSingleFileCall) Return(arg0 error) *PathFetcherInterfaceVisitSingleFileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PathFetcherInterfaceVisitSingleFileCall) Do(f func(context.Context, *gitalypb.Repository, []byte, []byte, gitaly.FetchVisitor) error) *PathFetcherInterfaceVisitSingleFileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PathFetcherInterfaceVisitSingleFileCall) DoAndReturn(f func(context.Context, *gitalypb.Repository, []byte, []byte, gitaly.FetchVisitor) error) *PathFetcherInterfaceVisitSingleFileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPollerInterface is a mock of PollerInterface interface.
type MockPollerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPollerInterfaceMockRecorder
}

// MockPollerInterfaceMockRecorder is the mock recorder for MockPollerInterface.
type MockPollerInterfaceMockRecorder struct {
	mock *MockPollerInterface
}

// NewMockPollerInterface creates a new mock instance.
func NewMockPollerInterface(ctrl *gomock.Controller) *MockPollerInterface {
	mock := &MockPollerInterface{ctrl: ctrl}
	mock.recorder = &MockPollerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPollerInterface) EXPECT() *MockPollerInterfaceMockRecorder {
	return m.recorder
}

// Poll mocks base method.
func (m *MockPollerInterface) Poll(arg0 context.Context, arg1 *gitalypb.Repository, arg2, arg3 string) (*gitaly.PollInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Poll", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*gitaly.PollInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Poll indicates an expected call of Poll.
func (mr *MockPollerInterfaceMockRecorder) Poll(arg0, arg1, arg2, arg3 any) *PollerInterfacePollCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Poll", reflect.TypeOf((*MockPollerInterface)(nil).Poll), arg0, arg1, arg2, arg3)
	return &PollerInterfacePollCall{Call: call}
}

// PollerInterfacePollCall wrap *gomock.Call
type PollerInterfacePollCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *PollerInterfacePollCall) Return(arg0 *gitaly.PollInfo, arg1 error) *PollerInterfacePollCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *PollerInterfacePollCall) Do(f func(context.Context, *gitalypb.Repository, string, string) (*gitaly.PollInfo, error)) *PollerInterfacePollCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *PollerInterfacePollCall) DoAndReturn(f func(context.Context, *gitalypb.Repository, string, string) (*gitaly.PollInfo, error)) *PollerInterfacePollCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
