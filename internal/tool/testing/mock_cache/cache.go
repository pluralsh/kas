// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/tool/cache (interfaces: ErrCacher)

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockErrCacher is a mock of ErrCacher interface.
type MockErrCacher struct {
	ctrl     *gomock.Controller
	recorder *MockErrCacherMockRecorder
}

// MockErrCacherMockRecorder is the mock recorder for MockErrCacher.
type MockErrCacherMockRecorder struct {
	mock *MockErrCacher
}

// NewMockErrCacher creates a new mock instance.
func NewMockErrCacher(ctrl *gomock.Controller) *MockErrCacher {
	mock := &MockErrCacher{ctrl: ctrl}
	mock.recorder = &MockErrCacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrCacher) EXPECT() *MockErrCacherMockRecorder {
	return m.recorder
}

// CacheError mocks base method.
func (m *MockErrCacher) CacheError(arg0 context.Context, arg1 interface{}, arg2 error, arg3 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CacheError", arg0, arg1, arg2, arg3)
}

// CacheError indicates an expected call of CacheError.
func (mr *MockErrCacherMockRecorder) CacheError(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CacheError", reflect.TypeOf((*MockErrCacher)(nil).CacheError), arg0, arg1, arg2, arg3)
}

// GetError mocks base method.
func (m *MockErrCacher) GetError(arg0 context.Context, arg1 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetError", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetError indicates an expected call of GetError.
func (mr *MockErrCacherMockRecorder) GetError(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetError", reflect.TypeOf((*MockErrCacher)(nil).GetError), arg0, arg1)
}
