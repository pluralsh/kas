// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/gitlab_access/rpc (interfaces: GitlabAccessClient,GitlabAccess_MakeRequestClient)

// Package mock_gitlab_access is a generated GoMock package.
package mock_gitlab_access

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	rpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/gitlab_access/rpc"
	grpctool "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/tool/grpctool"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGitlabAccessClient is a mock of GitlabAccessClient interface.
type MockGitlabAccessClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabAccessClientMockRecorder
}

// MockGitlabAccessClientMockRecorder is the mock recorder for MockGitlabAccessClient.
type MockGitlabAccessClientMockRecorder struct {
	mock *MockGitlabAccessClient
}

// NewMockGitlabAccessClient creates a new mock instance.
func NewMockGitlabAccessClient(ctrl *gomock.Controller) *MockGitlabAccessClient {
	mock := &MockGitlabAccessClient{ctrl: ctrl}
	mock.recorder = &MockGitlabAccessClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabAccessClient) EXPECT() *MockGitlabAccessClientMockRecorder {
	return m.recorder
}

// MakeRequest mocks base method.
func (m *MockGitlabAccessClient) MakeRequest(arg0 context.Context, arg1 ...grpc.CallOption) (rpc.GitlabAccess_MakeRequestClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MakeRequest", varargs...)
	ret0, _ := ret[0].(rpc.GitlabAccess_MakeRequestClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MakeRequest indicates an expected call of MakeRequest.
func (mr *MockGitlabAccessClientMockRecorder) MakeRequest(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeRequest", reflect.TypeOf((*MockGitlabAccessClient)(nil).MakeRequest), varargs...)
}

// MockGitlabAccess_MakeRequestClient is a mock of GitlabAccess_MakeRequestClient interface.
type MockGitlabAccess_MakeRequestClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitlabAccess_MakeRequestClientMockRecorder
}

// MockGitlabAccess_MakeRequestClientMockRecorder is the mock recorder for MockGitlabAccess_MakeRequestClient.
type MockGitlabAccess_MakeRequestClientMockRecorder struct {
	mock *MockGitlabAccess_MakeRequestClient
}

// NewMockGitlabAccess_MakeRequestClient creates a new mock instance.
func NewMockGitlabAccess_MakeRequestClient(ctrl *gomock.Controller) *MockGitlabAccess_MakeRequestClient {
	mock := &MockGitlabAccess_MakeRequestClient{ctrl: ctrl}
	mock.recorder = &MockGitlabAccess_MakeRequestClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitlabAccess_MakeRequestClient) EXPECT() *MockGitlabAccess_MakeRequestClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).Context))
}

// Header mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).Header))
}

// Recv mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) Recv() (*grpctool.HttpResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*grpctool.HttpResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).Recv))
}

// RecvMsg mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).RecvMsg), arg0)
}

// Send mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) Send(arg0 *grpctool.HttpRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).Send), arg0)
}

// SendMsg mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method.
func (m *MockGitlabAccess_MakeRequestClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGitlabAccess_MakeRequestClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGitlabAccess_MakeRequestClient)(nil).Trailer))
}
