// Code generated by MockGen. DO NOT EDIT.
// Source: ../../redistool/expiring_hash.go

// Package mock_redis is a generated GoMock package.
package mock_redis

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	redistool "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/tool/redistool"
)

// MockExpiringHashInterface is a mock of ExpiringHashInterface interface.
type MockExpiringHashInterface[K any] struct {
	ctrl     *gomock.Controller
	recorder *MockExpiringHashInterfaceMockRecorder[K]
}

// MockExpiringHashInterfaceMockRecorder is the mock recorder for MockExpiringHashInterface.
type MockExpiringHashInterfaceMockRecorder[K any] struct {
	mock *MockExpiringHashInterface[K]
}

// NewMockExpiringHashInterface creates a new mock instance.
func NewMockExpiringHashInterface[K any](ctrl *gomock.Controller) *MockExpiringHashInterface[K] {
	mock := &MockExpiringHashInterface[K]{ctrl: ctrl}
	mock.recorder = &MockExpiringHashInterfaceMockRecorder[K]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpiringHashInterface[K]) EXPECT() *MockExpiringHashInterfaceMockRecorder[K] {
	return m.recorder
}

// Forget mocks base method.
func (m *MockExpiringHashInterface[K]) Forget(key K, hashKey int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Forget", key, hashKey)
}

// Forget indicates an expected call of Forget.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Forget(key, hashKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Forget", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Forget), key, hashKey)
}

// GC mocks base method.
func (m *MockExpiringHashInterface[K]) GC() func(context.Context) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GC")
	ret0, _ := ret[0].(func(context.Context) (int, error))
	return ret0
}

// GC indicates an expected call of GC.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) GC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GC", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).GC))
}

// Len mocks base method.
func (m *MockExpiringHashInterface[K]) Len(ctx context.Context, key K) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Len", ctx, key)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Len indicates an expected call of Len.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Len(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Len", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Len), ctx, key)
}

// Refresh mocks base method.
func (m *MockExpiringHashInterface[K]) Refresh(nextRefresh time.Time) redistool.IOFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh", nextRefresh)
	ret0, _ := ret[0].(redistool.IOFunc)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Refresh(nextRefresh interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Refresh), nextRefresh)
}

// Scan mocks base method.
func (m *MockExpiringHashInterface[K]) Scan(ctx context.Context, key K, cb redistool.ScanCallback) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", ctx, key, cb)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Scan(ctx, key, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Scan), ctx, key, cb)
}

// Set mocks base method.
func (m *MockExpiringHashInterface[K]) Set(key K, hashKey int64, value []byte) redistool.IOFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, hashKey, value)
	ret0, _ := ret[0].(redistool.IOFunc)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Set(key, hashKey, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Set), key, hashKey, value)
}

// Unset mocks base method.
func (m *MockExpiringHashInterface[K]) Unset(key K, hashKey int64) redistool.IOFunc {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unset", key, hashKey)
	ret0, _ := ret[0].(redistool.IOFunc)
	return ret0
}

// Unset indicates an expected call of Unset.
func (mr *MockExpiringHashInterfaceMockRecorder[K]) Unset(key, hashKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unset", reflect.TypeOf((*MockExpiringHashInterface[K])(nil).Unset), key, hashKey)
}
