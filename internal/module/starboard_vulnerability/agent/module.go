package agent

import (
	"context"
	"errors"
	"fmt"

	"github.com/aquasecurity/starboard/pkg/vulnerabilityreport"
	"github.com/robfig/cron/v3"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/starboard_vulnerability"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/pkg/agentcfg"
	"go.uber.org/zap"
	"google.golang.org/protobuf/proto"
	"k8s.io/apimachinery/pkg/util/wait"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

var ErrMissingCadence = errors.New("cadence is a required field")

type module struct {
	log     *zap.Logger
	api     modagent.Api
	core    client.Client
	scanner *vulnerabilityreport.Scanner
}

func (m *module) Run(ctx context.Context, cfg <-chan *agentcfg.AgentConfiguration) error {
	var holder *workerHolder

	defer func() {
		if holder != nil {
			holder.stop()
		}
	}()

	for config := range cfg {
		if holder != nil {
			if holder.configChanged(config) {
				holder.stop()
				holder = m.newWorkerHolder(ctx, config)
			}
		} else {
			holder = m.newWorkerHolder(ctx, config)
		}
	}

	return nil
}

func (m *module) newWorkerHolder(ctx context.Context, cfg *agentcfg.AgentConfiguration) *workerHolder {
	if cfg.Starboard == nil {
		return nil
	}

	config := cfg.Starboard
	cadence, _ := cron.ParseStandard(cfg.Starboard.Cadence)
	holder := &workerHolder{
		config:  config,
		agentID: cfg.AgentId,
	}

	var targetNamespaces []string
	if config.VulnerabilityReport != nil {
		targetNamespaces = config.VulnerabilityReport.Namespaces
	}

	scanJob := &scanJob{
		vulnerabilityReportScanner: m.scanner,
		core:                       m.core,
		log:                        m.log,
		api:                        m.api,
		agentID:                    holder.agentID,
		targetNamespaces:           targetNamespaces,
	}

	ctx, holder.cancel = context.WithCancel(ctx)
	w := &worker{
		job:     scanJob,
		cadence: cadence,
	}

	holder.wg.StartWithContext(ctx, w.Run)
	return holder
}

func (m *module) IsRunnableConfiguration(cfg *agentcfg.AgentConfiguration) bool {
	return cfg.Starboard != nil
}

func (m *module) DefaultAndValidateConfiguration(cfg *agentcfg.AgentConfiguration) error {
	if cfg.Starboard == nil {
		return nil
	}

	if cfg.Starboard.Cadence == "" {
		return ErrMissingCadence
	}

	if _, err := cron.ParseStandard(cfg.Starboard.Cadence); err != nil {
		return fmt.Errorf("cadence is invalid: %w", err)
	}

	return nil
}

func (m *module) Name() string {
	return starboard_vulnerability.ModuleName
}

type workerHolder struct {
	agentID int64
	config  *agentcfg.StarboardCF
	wg      wait.Group
	cancel  context.CancelFunc
}

func (h *workerHolder) configChanged(cfg *agentcfg.AgentConfiguration) bool {
	return !proto.Equal(h.config, cfg.Starboard)
}

func (h *workerHolder) stop() {
	h.cancel()
	h.wg.Wait()
}
