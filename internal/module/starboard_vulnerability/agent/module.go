package agent

import (
	"context"
	"errors"
	"fmt"

	"github.com/robfig/cron/v3"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/module/modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/module/starboard_vulnerability"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/pkg/agentcfg"
	"go.uber.org/zap"
	"k8s.io/apimachinery/pkg/util/wait"
	"k8s.io/client-go/kubernetes"
)

var ErrMissingCadence = errors.New("cadence is a required field")

const (
	defaultTrivyResourceLimitsCpu      = "500m"
	defaultTrivyResourceLimitsMemory   = "500Mi"
	defaultTrivyResourceRequestsCpu    = "100m"
	defaultTrivyResourceRequestsMemory = "100Mi"
)

type module struct {
	log                       *zap.Logger
	api                       modagent.Api
	kubeClientset             kubernetes.Interface
	gitlabAgentNamespace      string
	gitlabAgentServiceAccount string
	holder                    WorkerHolderInterface
	policiesUpdateDataChannel chan *configurationToUpdateData
	newWorkerHolder           func(ctx context.Context, cfg *configurationToUpdateData) WorkerHolderInterface
}

func (m *module) Run(ctx context.Context, repositoryConfig <-chan *agentcfg.AgentConfiguration) error {
	policiesHolder := m.newSecurityPoliciesWorkerHolder(ctx, m.policiesUpdateDataChannel)

	defer func() {
		policiesHolder.stop()
		if m.holder != nil {
			m.holder.stop()
		}
	}()

	var securityPoliciesEnabled bool
	var resourceRequirements *agentcfg.ResourceRequirements

	for {
		select {
		case config, ok := <-repositoryConfig:
			if !ok {
				return nil
			}

			// Set local var resourceRequirements. This is used if securityPolicies is enabled as resourceRequirements can only be defined from the agent config
			resourceRequirements = config.ContainerScanning.ResourceRequirements

			if !securityPoliciesEnabled {
				// Do not update if config does not contain ContainerScanning configuration
				if config.ContainerScanning.Cadence == "" {
					continue
				}
				data := &configurationToUpdateData{
					agentId:                 config.AgentId,
					containerScanningConfig: config.ContainerScanning,
				}

				m.handleUpdate(ctx, data)
			}
		case data := <-m.policiesUpdateDataChannel:
			if data.containerScanningConfig == nil {
				m.log.Debug("ContainerScanning config is empty, security policies are disabled")
				securityPoliciesEnabled = false
			} else {
				m.log.Debug("ContainerScanning config is present, security policies are enabled")
				securityPoliciesEnabled = true
				if data != nil && data.containerScanningConfig != nil && resourceRequirements != nil {
					data.containerScanningConfig.ResourceRequirements = resourceRequirements
				}
				m.handleUpdate(ctx, data)
			}
		}
	}
}

func (m *module) handleUpdate(ctx context.Context, data *configurationToUpdateData) {
	if m.holder != nil {
		if m.holder.configChanged(data.containerScanningConfig) {
			m.holder.stop()
			m.holder = m.newWorkerHolder(ctx, data)
		}
	} else {
		m.holder = m.newWorkerHolder(ctx, data)
	}
}

func (m *module) newSecurityPoliciesWorkerHolder(ctx context.Context, updater chan<- *configurationToUpdateData) *securityPoliciesWorkerHolder {
	workerHolder := &securityPoliciesWorkerHolder{
		worker: securityPoliciesWorker{
			api:     m.api,
			log:     m.log,
			updater: updater,
		},
	}
	ctx, workerHolder.cancel = context.WithCancel(ctx)
	workerHolder.wg.StartWithContext(ctx, workerHolder.worker.Run)

	return workerHolder

}

func (m *module) IsRunnableConfiguration(cfg *agentcfg.AgentConfiguration) bool {
	// starboard_vulnerability module is always enabled as it vulnerability scan could be enforced by security policies
	return true
}

func (m *module) DefaultAndValidateConfiguration(cfg *agentcfg.AgentConfiguration) error {
	// If cfg.ContainerScanning is nil, this function will always default ResourceRequirement
	err := m.defaultAndValidateResourceRequirements(cfg)
	if err != nil {
		return fmt.Errorf("resource requirements is invalid: %w", err)
	}

	// Only parse cadence if it's present since agentConfig can contain only resourceRequirements
	if cfg.ContainerScanning != nil && cfg.ContainerScanning.Cadence != "" {
		if _, err := cron.ParseStandard(cfg.ContainerScanning.Cadence); err != nil {
			return fmt.Errorf("cadence is invalid: %w", err)
		}
	}

	return nil
}

// Default resourceRequirements even if containerScanning is nil since vulnerability scan could be enforced by security policies
func (m *module) defaultAndValidateResourceRequirements(cfg *agentcfg.AgentConfiguration) error {
	newResourceRequirements := &agentcfg.ResourceRequirements{
		Limits: &agentcfg.Resource{
			Cpu:    defaultTrivyResourceLimitsCpu,
			Memory: defaultTrivyResourceLimitsMemory,
		},
		Requests: &agentcfg.Resource{
			Cpu:    defaultTrivyResourceRequestsCpu,
			Memory: defaultTrivyResourceRequestsMemory,
		},
	}

	if cfg.ContainerScanning == nil {
		cfg.ContainerScanning = &agentcfg.ContainerScanningCF{
			ResourceRequirements: newResourceRequirements,
		}
		return nil
	}

	resourceRequirements := cfg.ContainerScanning.ResourceRequirements
	if resourceRequirements == nil {
		cfg.ContainerScanning.ResourceRequirements = newResourceRequirements
		return nil
	}

	if resourceRequirements.Limits != nil {
		defaultResources(resourceRequirements.Limits, newResourceRequirements.Limits)
	}
	if resourceRequirements.Requests != nil {
		defaultResources(resourceRequirements.Requests, newResourceRequirements.Requests)
	}

	_, err := parseAndValidateResource(newResourceRequirements.Limits)
	if err != nil {
		return err
	}
	_, err = parseAndValidateResource(newResourceRequirements.Requests)
	if err != nil {
		return err
	}

	cfg.ContainerScanning.ResourceRequirements = newResourceRequirements
	return nil
}

func (m *module) Name() string {
	return starboard_vulnerability.ModuleName
}

type securityPoliciesWorkerHolder struct {
	worker securityPoliciesWorker
	wg     wait.Group
	cancel context.CancelFunc
}

func (h *securityPoliciesWorkerHolder) stop() {
	h.cancel()
	h.wg.Wait()
}

func defaultResources(resources *agentcfg.Resource, parsedResource *agentcfg.Resource) {
	if resources.Cpu != "" {
		parsedResource.Cpu = resources.Cpu
	}
	if resources.Memory != "" {
		parsedResource.Memory = resources.Memory
	}
}
