package agent

import (
	"context"
	"testing"

	"github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	"github.com/aquasecurity/starboard/pkg/generated/clientset/versioned/fake"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/golang/mock/gomock"
	"github.com/stretchr/testify/assert"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/module/modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/internal/tool/testing/mock_modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v14/pkg/agentcfg"
	"go.uber.org/zap/zaptest"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/wait"
)

func TestWorker(t *testing.T) {
	ctrl := gomock.NewController(t)
	ctx, cancel := context.WithCancel(context.Background())

	reportList := &v1alpha1.VulnerabilityReportList{
		Items: []v1alpha1.VulnerabilityReport{
			{
				ObjectMeta: metav1.ObjectMeta{
					Name: "TestWorker",
					UID:  "a7458351-a1f6-428c-a6d9-5047601da48f",
					Labels: map[string]string{
						starboard.LabelContainerName:     "nginx",
						starboard.LabelResourceKind:      "Deployment",
						starboard.LabelResourceName:      "nginx",
						starboard.LabelResourceNamespace: "default",
					},
				},
				Report: v1alpha1.VulnerabilityReportData{
					Scanner: v1alpha1.Scanner{
						Name:    "Trivy",
						Vendor:  "Aqua Security",
						Version: "0.16.0",
					},
					Registry: v1alpha1.Registry{
						Server: "index.docker.io",
					},
					Artifact: v1alpha1.Artifact{
						Repository: "library/nginx",
						Tag:        "1.16",
					},
					Vulnerabilities: []v1alpha1.Vulnerability{
						{
							VulnerabilityID:  "CVE-2020-27350",
							Resource:         "apt",
							InstalledVersion: "1.8.2",
							FixedVersion:     "1.8.2.2",
							Severity:         "MEDIUM",
							Title:            "apt: integer overflows and underflows while parsing .deb packages",
							PrimaryLink:      "https://avd.aquasec.com/nvd/cve-2020-27350",
						},
						{
							VulnerabilityID:  "CVE-2020-3810",
							Resource:         "apt",
							InstalledVersion: "1.8.2",
							FixedVersion:     "1.8.2.1",
							Severity:         "MEDIUM",
							PrimaryLink:      "https://avd.aquasec.com/nvd/cve-2020-3810",
						},
					},
				},
			},
		},
	}

	client := fake.NewSimpleClientset(reportList)
	api := mock_modagent.NewMockApi(ctrl)
	w := &worker{
		log:     zaptest.NewLogger(t),
		api:     api,
		client:  client,
		config:  new(agentcfg.StarboardCF),
		agentID: 5000000000,
	}

	api.EXPECT().MakeGitLabRequest(ctx, "/",
		gomock.Any(),
		gomock.Any(),
	).MinTimes(1).
		DoAndReturn(func(ctx context.Context, path string, opts ...modagent.GitLabRequestOption) (*modagent.GitLabResponse, error) {
			cancel()
			return &modagent.GitLabResponse{
				StatusCode: 200,
			}, nil
		})

	var wg wait.Group
	wg.StartWithContext(ctx, w.Run)
	wg.Wait()
}

func TestMatch(t *testing.T) {
	testCases := []struct {
		name     string
		config   *agentcfg.StarboardCF
		labels   map[string]string
		expected bool
	}{
		{
			name:   "empty config",
			config: &agentcfg.StarboardCF{},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: true,
		},
		{
			name: "matching filters",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Namespaces: []string{"production", "staging"},
							Resources:  []string{"postgres-deployment"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: true,
		},
		{
			name: "non-matching filters",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Namespaces: []string{"production"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "staging",
			},
			expected: false,
		},
		{
			name: "incomplete match",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Namespaces: []string{"production"},
							Resources:  []string{"nginx"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
		{
			name: "case-insensitive match",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Resources: []string{"POSTGRES-DEPLOYMENT"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: true,
		},
		{
			name: "container filter",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"non-match"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"production"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
		{
			name: "resource filter",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"non-match"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"production"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
		{
			name: "kind filter",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"non-match"},
							Namespaces: []string{"production"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
		{
			name: "namespace filter",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"non-match"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
		{
			name: "namespace takes precedence",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Namespaces: []string{"production"},
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"non-match"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: true,
		},
		{
			name: "matches filter but not namespace",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Namespaces: []string{"non-match"},
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"production"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: true,
		},
		{
			name: "matches neither namespace nor filter",
			config: &agentcfg.StarboardCF{
				VulnerabilityReport: &agentcfg.VulnerabilityReport{
					Namespaces: []string{"non-match"},
					Filters: []*agentcfg.StarboardFilter{
						{
							Containers: []string{"postgres"},
							Resources:  []string{"postgres-deployment"},
							Kinds:      []string{"Deployment"},
							Namespaces: []string{"non-match"},
						},
					},
				},
			},
			labels: map[string]string{
				starboard.LabelContainerName:     "postgres",
				starboard.LabelResourceName:      "postgres-deployment",
				starboard.LabelResourceKind:      "Deployment",
				starboard.LabelResourceNamespace: "production",
			},
			expected: false,
		},
	}

	for _, tc := range testCases {
		t.Run(tc.name, func(t *testing.T) {
			worker := &worker{
				config: tc.config,
			}

			actual := worker.matchesConfig(tc.labels)
			assert.Equal(t, tc.expected, actual)
		})
	}
}
