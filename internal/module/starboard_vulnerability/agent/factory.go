package agent

import (
	"fmt"
	"time"

	"github.com/aquasecurity/starboard/pkg/kube"
	"github.com/aquasecurity/starboard/pkg/plugin"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/aquasecurity/starboard/pkg/vulnerabilityreport"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/starboard_vulnerability"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

const (
	scanTimeout                      = 5 * time.Minute
	defaultGitlabAgentNamespace      = "gitlab-agent"
	defaultGitlabAgentServiceAccount = "gitlab-agent"
)

type Factory struct{}

func (f *Factory) New(cfg *modagent.Config) (modagent.Module, error) {
	config, err := cfg.K8sUtilFactory.ToRESTConfig()
	if err != nil {
		return nil, fmt.Errorf("could not get client REST config: %w", err)
	}

	coreClient, err := client.New(config, client.Options{Scheme: starboard.NewScheme()})
	if err != nil {
		return nil, fmt.Errorf("could not initialze core client: %w", err)
	}

	scanner, err := newScanner(coreClient, config, cfg)
	if err != nil {
		return nil, fmt.Errorf("could not create vulnerabilityreports scanner: %w", err)
	}

	return &module{
		log:     cfg.Log,
		api:     cfg.Api,
		core:    coreClient,
		scanner: scanner,
		kasConn: cfg.KasConn,
	}, nil
}

func (f *Factory) Name() string {
	return starboard_vulnerability.ModuleName
}

func (f *Factory) UsesInternalServer() bool {
	return false
}

func newScanner(client client.Client, config *rest.Config, cfg *modagent.Config) (*vulnerabilityreport.Scanner, error) {
	kubeClientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		return nil, fmt.Errorf("could not create kubernetes clientset: %w", err)
	}

	gitlabAgentNamespace, gitlabAgentServiceAccount := getAgentNamespaceAndServiceAccount(cfg)

	plugin, _, err := plugin.NewResolver().
		WithNamespace(gitlabAgentNamespace).
		WithServiceAccountName(gitlabAgentServiceAccount).
		WithConfig(starboardConfig).
		WithClient(client).
		GetVulnerabilityPlugin()
	if err != nil {
		return nil, fmt.Errorf("could not create vulnerabilityreports plugin: %w", err)
	}

	opts := kube.ScannerOpts{
		ScanJobTimeout: scanTimeout,
		DeleteScanJob:  true,
	}

	context := &pluginContext{
		namespace:          gitlabAgentNamespace,
		serviceAccountName: gitlabAgentServiceAccount,
	}

	scanner := vulnerabilityreport.NewScanner(
		kubeClientset,
		client,
		plugin,
		context,
		starboardConfig,
		opts,
	)

	return scanner, nil
}

func getAgentNamespaceAndServiceAccount(cfg *modagent.Config) (string, string) {
	namespace := cfg.AgentMeta.PodNamespace
	if namespace == "" {
		namespace = defaultGitlabAgentNamespace
	}

	serviceAccountName := cfg.ServiceAccountName
	if serviceAccountName == "" {
		serviceAccountName = defaultGitlabAgentServiceAccount
	}

	return namespace, serviceAccountName
}
