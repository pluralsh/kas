package agent

import (
	"fmt"
	"time"

	"github.com/aquasecurity/starboard/pkg/kube"
	"github.com/aquasecurity/starboard/pkg/plugin"
	"github.com/aquasecurity/starboard/pkg/starboard"
	"github.com/aquasecurity/starboard/pkg/vulnerabilityreport"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/modagent"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/modshared"
	"gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/starboard_vulnerability"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

const (
	scanTimeout                      = 5 * time.Minute
	defaultGitlabAgentNamespace      = "gitlab-agent"
	defaultGitlabAgentServiceAccount = "gitlab-agent"
)

type Factory struct{}

func (f *Factory) New(cfg *modagent.Config) (modagent.Module, error) {
	config, err := cfg.K8sUtilFactory.ToRESTConfig()
	if err != nil {
		return nil, fmt.Errorf("could not get client REST config: %w", err)
	}
	mapper, err := cfg.K8sUtilFactory.ToRESTMapper()
	if err != nil {
		return nil, fmt.Errorf("could not get REST mapper: %w", err)
	}
	kubeClientset, err := cfg.K8sUtilFactory.KubernetesClientSet()
	if err != nil {
		return nil, fmt.Errorf("could not create kubernetes clientset: %w", err)
	}
	coreClient, err := client.New(config, client.Options{
		Scheme: starboard.NewScheme(),
		Mapper: mapper,
	})
	if err != nil {
		return nil, fmt.Errorf("could not initialze core client: %w", err)
	}
	gitlabAgentNamespace, gitlabAgentServiceAccount := getAgentNamespaceAndServiceAccount(cfg)
	plugin, _, err := plugin.NewResolver().
		WithNamespace(gitlabAgentNamespace).
		WithServiceAccountName(gitlabAgentServiceAccount).
		WithConfig(starboardConfig).
		WithClient(coreClient).
		GetVulnerabilityPlugin()
	if err != nil {
		return nil, fmt.Errorf("could not create vulnerabilityreports plugin: %w", err)
	}
	return &module{
		log:           cfg.Log,
		api:           cfg.Api,
		kubeClientset: coreClient,
		kasConn:       cfg.KasConn,
		scanner: func() (VulnerabilityReportScanner, error) {
			cm, err := kube.InitCompatibleMgr(mapper)
			if err != nil {
				return nil, fmt.Errorf("InitCompatibleMgr: %w", err)
			}

			opts := kube.ScannerOpts{
				ScanJobTimeout: scanTimeout,
				DeleteScanJob:  true,
			}
			context := &pluginContext{
				namespace:          gitlabAgentNamespace,
				serviceAccountName: gitlabAgentServiceAccount,
			}

			return vulnerabilityreport.NewScanner(
				kubeClientset,
				coreClient,
				cm,
				plugin,
				context,
				starboardConfig,
				opts,
			), nil
		},
	}, nil
}

func (f *Factory) Name() string {
	return starboard_vulnerability.ModuleName
}

func (f *Factory) StartStopPhase() modshared.ModuleStartStopPhase {
	return modshared.ModuleStartBeforeServers
}

func getAgentNamespaceAndServiceAccount(cfg *modagent.Config) (string, string) {
	namespace := cfg.AgentMeta.PodNamespace
	if namespace == "" {
		namespace = defaultGitlabAgentNamespace
	}

	serviceAccountName := cfg.ServiceAccountName
	if serviceAccountName == "" {
		serviceAccountName = defaultGitlabAgentServiceAccount
	}

	return namespace, serviceAccountName
}
