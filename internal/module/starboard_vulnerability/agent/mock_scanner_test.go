// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/starboard_vulnerability/agent (interfaces: VulnerabilityReportScanner)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	v1alpha1 "github.com/aquasecurity/starboard/pkg/apis/aquasecurity/v1alpha1"
	kube "github.com/aquasecurity/starboard/pkg/kube"
	gomock "github.com/golang/mock/gomock"
)

// MockVulnerabilityReportScanner is a mock of VulnerabilityReportScanner interface.
type MockVulnerabilityReportScanner struct {
	ctrl     *gomock.Controller
	recorder *MockVulnerabilityReportScannerMockRecorder
}

// MockVulnerabilityReportScannerMockRecorder is the mock recorder for MockVulnerabilityReportScanner.
type MockVulnerabilityReportScannerMockRecorder struct {
	mock *MockVulnerabilityReportScanner
}

// NewMockVulnerabilityReportScanner creates a new mock instance.
func NewMockVulnerabilityReportScanner(ctrl *gomock.Controller) *MockVulnerabilityReportScanner {
	mock := &MockVulnerabilityReportScanner{ctrl: ctrl}
	mock.recorder = &MockVulnerabilityReportScannerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVulnerabilityReportScanner) EXPECT() *MockVulnerabilityReportScannerMockRecorder {
	return m.recorder
}

// Scan mocks base method.
func (m *MockVulnerabilityReportScanner) Scan(arg0 context.Context, arg1 kube.ObjectRef) ([]v1alpha1.VulnerabilityReport, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scan", arg0, arg1)
	ret0, _ := ret[0].([]v1alpha1.VulnerabilityReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Scan indicates an expected call of Scan.
func (mr *MockVulnerabilityReportScannerMockRecorder) Scan(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockVulnerabilityReportScanner)(nil).Scan), arg0, arg1)
}
