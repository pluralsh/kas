// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/internal/module/gitops/agent (interfaces: WorkerFactory,Worker)

// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	agentcfg "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v15/pkg/agentcfg"
)

// MockWorkerFactory is a mock of WorkerFactory interface.
type MockWorkerFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerFactoryMockRecorder
}

// MockWorkerFactoryMockRecorder is the mock recorder for MockWorkerFactory.
type MockWorkerFactoryMockRecorder struct {
	mock *MockWorkerFactory
}

// NewMockWorkerFactory creates a new mock instance.
func NewMockWorkerFactory(ctrl *gomock.Controller) *MockWorkerFactory {
	mock := &MockWorkerFactory{ctrl: ctrl}
	mock.recorder = &MockWorkerFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorkerFactory) EXPECT() *MockWorkerFactoryMockRecorder {
	return m.recorder
}

// New mocks base method.
func (m *MockWorkerFactory) New(arg0 int64, arg1 *agentcfg.ManifestProjectCF) Worker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1)
	ret0, _ := ret[0].(Worker)
	return ret0
}

// New indicates an expected call of New.
func (mr *MockWorkerFactoryMockRecorder) New(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockWorkerFactory)(nil).New), arg0, arg1)
}

// MockWorker is a mock of Worker interface.
type MockWorker struct {
	ctrl     *gomock.Controller
	recorder *MockWorkerMockRecorder
}

// MockWorkerMockRecorder is the mock recorder for MockWorker.
type MockWorkerMockRecorder struct {
	mock *MockWorker
}

// NewMockWorker creates a new mock instance.
func NewMockWorker(ctrl *gomock.Controller) *MockWorker {
	mock := &MockWorker{ctrl: ctrl}
	mock.recorder = &MockWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWorker) EXPECT() *MockWorkerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockWorker) Run(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run", arg0)
}

// Run indicates an expected call of Run.
func (mr *MockWorkerMockRecorder) Run(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockWorker)(nil).Run), arg0)
}
