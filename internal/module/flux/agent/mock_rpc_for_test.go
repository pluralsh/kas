// Code generated by MockGen. DO NOT EDIT.
// Source: gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/module/flux/rpc (interfaces: GitLabFluxClient,GitLabFlux_ReconcileProjectsClient)
//
// Generated by this command:
//
//	mockgen -typed -destination mock_rpc_for_test.go -package agent gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/module/flux/rpc GitLabFluxClient,GitLabFlux_ReconcileProjectsClient
//
// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	rpc "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/internal/module/flux/rpc"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockGitLabFluxClient is a mock of GitLabFluxClient interface.
type MockGitLabFluxClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabFluxClientMockRecorder
}

// MockGitLabFluxClientMockRecorder is the mock recorder for MockGitLabFluxClient.
type MockGitLabFluxClientMockRecorder struct {
	mock *MockGitLabFluxClient
}

// NewMockGitLabFluxClient creates a new mock instance.
func NewMockGitLabFluxClient(ctrl *gomock.Controller) *MockGitLabFluxClient {
	mock := &MockGitLabFluxClient{ctrl: ctrl}
	mock.recorder = &MockGitLabFluxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabFluxClient) EXPECT() *MockGitLabFluxClientMockRecorder {
	return m.recorder
}

// ReconcileProjects mocks base method.
func (m *MockGitLabFluxClient) ReconcileProjects(arg0 context.Context, arg1 *rpc.ReconcileProjectsRequest, arg2 ...grpc.CallOption) (rpc.GitLabFlux_ReconcileProjectsClient, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReconcileProjects", varargs...)
	ret0, _ := ret[0].(rpc.GitLabFlux_ReconcileProjectsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReconcileProjects indicates an expected call of ReconcileProjects.
func (mr *MockGitLabFluxClientMockRecorder) ReconcileProjects(arg0, arg1 any, arg2 ...any) *GitLabFluxClientReconcileProjectsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileProjects", reflect.TypeOf((*MockGitLabFluxClient)(nil).ReconcileProjects), varargs...)
	return &GitLabFluxClientReconcileProjectsCall{Call: call}
}

// GitLabFluxClientReconcileProjectsCall wrap *gomock.Call
type GitLabFluxClientReconcileProjectsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFluxClientReconcileProjectsCall) Return(arg0 rpc.GitLabFlux_ReconcileProjectsClient, arg1 error) *GitLabFluxClientReconcileProjectsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFluxClientReconcileProjectsCall) Do(f func(context.Context, *rpc.ReconcileProjectsRequest, ...grpc.CallOption) (rpc.GitLabFlux_ReconcileProjectsClient, error)) *GitLabFluxClientReconcileProjectsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFluxClientReconcileProjectsCall) DoAndReturn(f func(context.Context, *rpc.ReconcileProjectsRequest, ...grpc.CallOption) (rpc.GitLabFlux_ReconcileProjectsClient, error)) *GitLabFluxClientReconcileProjectsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockGitLabFlux_ReconcileProjectsClient is a mock of GitLabFlux_ReconcileProjectsClient interface.
type MockGitLabFlux_ReconcileProjectsClient struct {
	ctrl     *gomock.Controller
	recorder *MockGitLabFlux_ReconcileProjectsClientMockRecorder
}

// MockGitLabFlux_ReconcileProjectsClientMockRecorder is the mock recorder for MockGitLabFlux_ReconcileProjectsClient.
type MockGitLabFlux_ReconcileProjectsClientMockRecorder struct {
	mock *MockGitLabFlux_ReconcileProjectsClient
}

// NewMockGitLabFlux_ReconcileProjectsClient creates a new mock instance.
func NewMockGitLabFlux_ReconcileProjectsClient(ctrl *gomock.Controller) *MockGitLabFlux_ReconcileProjectsClient {
	mock := &MockGitLabFlux_ReconcileProjectsClient{ctrl: ctrl}
	mock.recorder = &MockGitLabFlux_ReconcileProjectsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitLabFlux_ReconcileProjectsClient) EXPECT() *MockGitLabFlux_ReconcileProjectsClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) CloseSend() *GitLabFlux_ReconcileProjectsClientCloseSendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).CloseSend))
	return &GitLabFlux_ReconcileProjectsClientCloseSendCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientCloseSendCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientCloseSendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientCloseSendCall) Return(arg0 error) *GitLabFlux_ReconcileProjectsClientCloseSendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientCloseSendCall) Do(f func() error) *GitLabFlux_ReconcileProjectsClientCloseSendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientCloseSendCall) DoAndReturn(f func() error) *GitLabFlux_ReconcileProjectsClientCloseSendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Context mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) Context() *GitLabFlux_ReconcileProjectsClientContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).Context))
	return &GitLabFlux_ReconcileProjectsClientContextCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientContextCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientContextCall) Return(arg0 context.Context) *GitLabFlux_ReconcileProjectsClientContextCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientContextCall) Do(f func() context.Context) *GitLabFlux_ReconcileProjectsClientContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientContextCall) DoAndReturn(f func() context.Context) *GitLabFlux_ReconcileProjectsClientContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Header mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) Header() *GitLabFlux_ReconcileProjectsClientHeaderCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).Header))
	return &GitLabFlux_ReconcileProjectsClientHeaderCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientHeaderCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientHeaderCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientHeaderCall) Return(arg0 metadata.MD, arg1 error) *GitLabFlux_ReconcileProjectsClientHeaderCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientHeaderCall) Do(f func() (metadata.MD, error)) *GitLabFlux_ReconcileProjectsClientHeaderCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientHeaderCall) DoAndReturn(f func() (metadata.MD, error)) *GitLabFlux_ReconcileProjectsClientHeaderCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Recv mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) Recv() (*rpc.ReconcileProjectsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*rpc.ReconcileProjectsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) Recv() *GitLabFlux_ReconcileProjectsClientRecvCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).Recv))
	return &GitLabFlux_ReconcileProjectsClientRecvCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientRecvCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientRecvCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientRecvCall) Return(arg0 *rpc.ReconcileProjectsResponse, arg1 error) *GitLabFlux_ReconcileProjectsClientRecvCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientRecvCall) Do(f func() (*rpc.ReconcileProjectsResponse, error)) *GitLabFlux_ReconcileProjectsClientRecvCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientRecvCall) DoAndReturn(f func() (*rpc.ReconcileProjectsResponse, error)) *GitLabFlux_ReconcileProjectsClientRecvCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecvMsg mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) RecvMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) RecvMsg(arg0 any) *GitLabFlux_ReconcileProjectsClientRecvMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).RecvMsg), arg0)
	return &GitLabFlux_ReconcileProjectsClientRecvMsgCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientRecvMsgCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientRecvMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientRecvMsgCall) Return(arg0 error) *GitLabFlux_ReconcileProjectsClientRecvMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientRecvMsgCall) Do(f func(any) error) *GitLabFlux_ReconcileProjectsClientRecvMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientRecvMsgCall) DoAndReturn(f func(any) error) *GitLabFlux_ReconcileProjectsClientRecvMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SendMsg mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) SendMsg(arg0 any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) SendMsg(arg0 any) *GitLabFlux_ReconcileProjectsClientSendMsgCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).SendMsg), arg0)
	return &GitLabFlux_ReconcileProjectsClientSendMsgCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientSendMsgCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientSendMsgCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientSendMsgCall) Return(arg0 error) *GitLabFlux_ReconcileProjectsClientSendMsgCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientSendMsgCall) Do(f func(any) error) *GitLabFlux_ReconcileProjectsClientSendMsgCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientSendMsgCall) DoAndReturn(f func(any) error) *GitLabFlux_ReconcileProjectsClientSendMsgCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Trailer mocks base method.
func (m *MockGitLabFlux_ReconcileProjectsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockGitLabFlux_ReconcileProjectsClientMockRecorder) Trailer() *GitLabFlux_ReconcileProjectsClientTrailerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockGitLabFlux_ReconcileProjectsClient)(nil).Trailer))
	return &GitLabFlux_ReconcileProjectsClientTrailerCall{Call: call}
}

// GitLabFlux_ReconcileProjectsClientTrailerCall wrap *gomock.Call
type GitLabFlux_ReconcileProjectsClientTrailerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *GitLabFlux_ReconcileProjectsClientTrailerCall) Return(arg0 metadata.MD) *GitLabFlux_ReconcileProjectsClientTrailerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *GitLabFlux_ReconcileProjectsClientTrailerCall) Do(f func() metadata.MD) *GitLabFlux_ReconcileProjectsClientTrailerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *GitLabFlux_ReconcileProjectsClientTrailerCall) DoAndReturn(f func() metadata.MD) *GitLabFlux_ReconcileProjectsClientTrailerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
