// Code generated by MockGen. DO NOT EDIT.
// Source: client.go
//
// Generated by this command:
//
//	mockgen -source client.go -destination mock_client_for_test.go -package agent projectReconciler
//
// Package agent is a generated GoMock package.
package agent

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockprojectReconciler is a mock of projectReconciler interface.
type MockprojectReconciler struct {
	ctrl     *gomock.Controller
	recorder *MockprojectReconcilerMockRecorder
}

// MockprojectReconcilerMockRecorder is the mock recorder for MockprojectReconciler.
type MockprojectReconcilerMockRecorder struct {
	mock *MockprojectReconciler
}

// NewMockprojectReconciler creates a new mock instance.
func NewMockprojectReconciler(ctrl *gomock.Controller) *MockprojectReconciler {
	mock := &MockprojectReconciler{ctrl: ctrl}
	mock.recorder = &MockprojectReconcilerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprojectReconciler) EXPECT() *MockprojectReconcilerMockRecorder {
	return m.recorder
}

// ReconcileIndexedProjects mocks base method.
func (m *MockprojectReconciler) ReconcileIndexedProjects(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReconcileIndexedProjects", ctx)
}

// ReconcileIndexedProjects indicates an expected call of ReconcileIndexedProjects.
func (mr *MockprojectReconcilerMockRecorder) ReconcileIndexedProjects(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReconcileIndexedProjects", reflect.TypeOf((*MockprojectReconciler)(nil).ReconcileIndexedProjects), ctx)
}
