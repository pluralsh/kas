// Code generated by MockGen. DO NOT EDIT.
// Source: module.go
//
// Generated by this command:
//
//	mockgen -typed -source module.go -destination mock_profiler_runner.go -package agent profilerRunner
//
// Package agent is a generated GoMock package.
package agent

import (
	reflect "reflect"

	agentcfg "gitlab.com/gitlab-org/cluster-integration/gitlab-agent/v16/pkg/agentcfg"
	gomock "go.uber.org/mock/gomock"
)

// MockprofilerRunner is a mock of profilerRunner interface.
type MockprofilerRunner struct {
	ctrl     *gomock.Controller
	recorder *MockprofilerRunnerMockRecorder
}

// MockprofilerRunnerMockRecorder is the mock recorder for MockprofilerRunner.
type MockprofilerRunnerMockRecorder struct {
	mock *MockprofilerRunner
}

// NewMockprofilerRunner creates a new mock instance.
func NewMockprofilerRunner(ctrl *gomock.Controller) *MockprofilerRunner {
	mock := &MockprofilerRunner{ctrl: ctrl}
	mock.recorder = &MockprofilerRunnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockprofilerRunner) EXPECT() *MockprofilerRunnerMockRecorder {
	return m.recorder
}

// start mocks base method.
func (m *MockprofilerRunner) start(cfg *agentcfg.GoogleProfilerCF) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "start", cfg)
	ret0, _ := ret[0].(error)
	return ret0
}

// start indicates an expected call of start.
func (mr *MockprofilerRunnerMockRecorder) start(cfg any) *profilerRunnerstartCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "start", reflect.TypeOf((*MockprofilerRunner)(nil).start), cfg)
	return &profilerRunnerstartCall{Call: call}
}

// profilerRunnerstartCall wrap *gomock.Call
type profilerRunnerstartCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *profilerRunnerstartCall) Return(arg0 error) *profilerRunnerstartCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *profilerRunnerstartCall) Do(f func(*agentcfg.GoogleProfilerCF) error) *profilerRunnerstartCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *profilerRunnerstartCall) DoAndReturn(f func(*agentcfg.GoogleProfilerCF) error) *profilerRunnerstartCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
